{"version":3,"file":"main-5d24f2c9.js","sources":["../../src/utils/emitter.ts","../../src/config/chains.ts","../../src/core/wallet.ts","../../src/libs/erc4337/types.ts","../../src/libs/erc4337/bundler.ts","../../src/utils/token.ts","../../src/api/okx-dex.ts","../../src/core/dex.ts","../../src/utils/debounce.ts","../../src/ui/manager.ts","../../src/ui/notifications.ts","../../src/ui/bundle-tracker.ts","../../src/ui/theme-manager.ts","../../src/main.ts"],"sourcesContent":["export type Listener = (...args: any[]) => void\n\nexport class SimpleEventEmitter {\n  private listeners: Map<string, Set<Listener>> = new Map()\n\n  on(event: string, listener: Listener): this {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set())\n    }\n    this.listeners.get(event)!.add(listener)\n    return this\n  }\n\n  off(event: string, listener: Listener): this {\n    const set = this.listeners.get(event)\n    if (set) {\n      set.delete(listener)\n      if (set.size === 0) this.listeners.delete(event)\n    }\n    return this\n  }\n\n  once(event: string, listener: Listener): this {\n    const onceListener: Listener = (...args: any[]) => {\n      this.off(event, onceListener)\n      listener(...args)\n    }\n    return this.on(event, onceListener)\n  }\n\n  emit(event: string, ...args: any[]): boolean {\n    const set = this.listeners.get(event)\n    if (!set || set.size === 0) return false\n    for (const listener of Array.from(set)) {\n      try {\n        listener(...args)\n      } catch (err) {\n        // swallow listener errors to avoid breaking emitter\n        console.error(`Error in listener for event '${event}':`, err)\n      }\n    }\n    return true\n  }\n\n  removeAllListeners(event?: string): this {\n    if (event) {\n      this.listeners.delete(event)\n    } else {\n      this.listeners.clear()\n    }\n    return this\n  }\n}","export interface ChainConfig {\n  id: number\n  name: string\n  symbol: string\n  decimals: number\n  rpcUrl: string\n  blockExplorer: string\n  logoUrl?: string\n  isTestnet?: boolean\n}\n\nexport const SUPPORTED_CHAINS: Record<number, ChainConfig> = {\n  1: {\n    id: 1,\n    name: 'Ethereum',\n    symbol: 'ETH',\n    decimals: 18,\n    rpcUrl: 'https://eth.llamarpc.com',\n    blockExplorer: 'https://etherscan.io',\n    logoUrl: 'https://cryptologos.cc/logos/ethereum-eth-logo.svg'\n  },\n  137: {\n    id: 137,\n    name: 'Polygon',\n    symbol: 'MATIC',\n    decimals: 18,\n    rpcUrl: 'https://polygon.llamarpc.com',\n    blockExplorer: 'https://polygonscan.com',\n    logoUrl: 'https://cryptologos.cc/logos/polygon-matic-logo.svg'\n  },\n  56: {\n    id: 56,\n    name: 'BNB Smart Chain',\n    symbol: 'BNB',\n    decimals: 18,\n    rpcUrl: 'https://bsc.llamarpc.com',\n    blockExplorer: 'https://bscscan.com',\n    logoUrl: 'https://cryptologos.cc/logos/bnb-bnb-logo.svg'\n  },\n  42161: {\n    id: 42161,\n    name: 'Arbitrum One',\n    symbol: 'ETH',\n    decimals: 18,\n    rpcUrl: 'https://arbitrum.llamarpc.com',\n    blockExplorer: 'https://arbiscan.io',\n    logoUrl: 'https://cryptologos.cc/logos/arbitrum-arb-logo.svg'\n  },\n  10: {\n    id: 10,\n    name: 'Optimism',\n    symbol: 'ETH',\n    decimals: 18,\n    rpcUrl: 'https://optimism.llamarpc.com',\n    blockExplorer: 'https://optimistic.etherscan.io',\n    logoUrl: 'https://cryptologos.cc/logos/optimism-ethereum-op-logo.svg'\n  },\n  8453: {\n    id: 8453,\n    name: 'Base',\n    symbol: 'ETH',\n    decimals: 18,\n    rpcUrl: 'https://base.llamarpc.com',\n    blockExplorer: 'https://basescan.org',\n    logoUrl: 'https://cryptologos.cc/logos/base-base-logo.svg'\n  }\n}\n\nexport const DEFAULT_CHAIN_ID = 1\n\nexport function getChainConfig(chainId: number): ChainConfig | undefined {\n  return SUPPORTED_CHAINS[chainId]\n}\n\nexport function isChainSupported(chainId: number): boolean {\n  return chainId in SUPPORTED_CHAINS\n}\n\nexport function getAllSupportedChains(): ChainConfig[] {\n  return Object.values(SUPPORTED_CHAINS)\n}","import { ethers } from 'ethers'\nimport { SimpleEventEmitter } from '@/utils/emitter'\nimport { SUPPORTED_CHAINS, ChainConfig } from '../config/chains'\n\nexport interface WalletState {\n  isConnected: boolean\n  address: string | null\n  chainId: number | null\n  balance: string\n  provider: ethers.BrowserProvider | null\n  signer: ethers.JsonRpcSigner | null\n}\n\nexport interface SupportedChain {\n  id: number\n  name: string\n  rpcUrl: string\n  blockExplorer: string\n  nativeCurrency: {\n    name: string\n    symbol: string\n    decimals: number\n  }\n}\n\n// SUPPORTED_CHAINS is imported from '../config/chains'\n\n/**\n * Wallet Manager using pure ethers.js\n * Handles wallet connections, network switching, and account management\n */\nexport class WalletManager extends SimpleEventEmitter {\n  private state: WalletState = {\n    isConnected: false,\n    address: null,\n    chainId: null,\n    balance: '0',\n    provider: null,\n    signer: null\n  }\n\n  constructor() {\n    super()\n    this.setupEventListeners()\n  }\n\n  async initialize(): Promise<void> {\n    // Check if wallet was previously connected\n    const wasConnected = localStorage.getItem('wallet-connected')\n    if (wasConnected === 'true' && this.isMetaMaskAvailable()) {\n      await this.connectWallet()\n    }\n  }\n\n  private isMetaMaskAvailable(): boolean {\n    return typeof window !== 'undefined' && typeof window.ethereum !== 'undefined'\n  }\n\n  private setupEventListeners(): void {\n    if (!this.isMetaMaskAvailable()) return\n\n    // Listen for account changes\n    window.ethereum.on('accountsChanged', (accounts: string[]) => {\n      if (accounts.length === 0) {\n        this.disconnect()\n      } else {\n        this.handleAccountChange(accounts[0])\n      }\n    })\n\n    // Listen for chain changes\n    window.ethereum.on('chainChanged', (chainId: string) => {\n      this.handleChainChange(parseInt(chainId, 16))\n    })\n\n    // Listen for disconnect\n    window.ethereum.on('disconnect', () => {\n      this.disconnect()\n    })\n  }\n\n  async connectWallet(): Promise<void> {\n    if (!this.isMetaMaskAvailable()) {\n      throw new Error('MetaMask is not installed')\n    }\n\n    try {\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      })\n\n      if (accounts.length === 0) {\n        throw new Error('No accounts found')\n      }\n\n      // Create provider and signer\n      const provider = new ethers.BrowserProvider(window.ethereum)\n      const signer = await provider.getSigner()\n      const address = await signer.getAddress()\n      const network = await provider.getNetwork()\n      const balance = await provider.getBalance(address)\n\n      // Update state\n      this.state = {\n        isConnected: true,\n        address,\n        chainId: Number(network.chainId),\n        balance: ethers.formatEther(balance),\n        provider,\n        signer\n      }\n\n      // Save connection state\n      localStorage.setItem('wallet-connected', 'true')\n\n      this.emit('connected', this.state)\n      console.log('‚úÖ Wallet connected:', address)\n    } catch (error) {\n      console.error('‚ùå Failed to connect wallet:', error)\n      throw error\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.state = {\n      isConnected: false,\n      address: null,\n      chainId: null,\n      balance: '0',\n      provider: null,\n      signer: null\n    }\n\n    localStorage.removeItem('wallet-connected')\n    this.emit('disconnected')\n    console.log('üîå Wallet disconnected')\n  }\n\n  async switchNetwork(chainId: number): Promise<void> {\n    if (!this.isMetaMaskAvailable() || !this.state.isConnected) {\n      throw new Error('Wallet not connected')\n    }\n\n    const chain = SUPPORTED_CHAINS[chainId]\n    if (!chain) {\n      throw new Error(`Unsupported chain ID: ${chainId}`)\n    }\n\n    try {\n      // Try to switch to the network\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: `0x${chainId.toString(16)}` }]\n      })\n    } catch (error: any) {\n      // If network doesn't exist, add it\n      if (error.code === 4902) {\n        await this.addNetwork(chain)\n      } else {\n        throw error\n      }\n    }\n  }\n\n  private async addNetwork(chain: ChainConfig): Promise<void> {\n    await window.ethereum.request({\n      method: 'wallet_addEthereumChain',\n      params: [{\n        chainId: `0x${chain.id.toString(16)}`,\n        chainName: chain.name,\n        nativeCurrency: {\n          name: chain.symbol,\n          symbol: chain.symbol,\n          decimals: chain.decimals\n        },\n        rpcUrls: [chain.rpcUrl],\n        blockExplorerUrls: [chain.blockExplorer]\n      }]\n    })\n  }\n\n  private async handleAccountChange(newAddress: string): Promise<void> {\n    if (this.state.provider) {\n      const balance = await this.state.provider.getBalance(newAddress)\n      this.state.address = newAddress\n      this.state.balance = ethers.formatEther(balance)\n      this.emit('accountChanged', this.state)\n    }\n  }\n\n  private async handleChainChange(newChainId: number): Promise<void> {\n    this.state.chainId = newChainId\n    \n    if (this.state.provider && this.state.address) {\n      const balance = await this.state.provider.getBalance(this.state.address)\n      this.state.balance = ethers.formatEther(balance)\n    }\n    \n    this.emit('chainChanged', this.state)\n  }\n\n  async updateBalance(): Promise<void> {\n    if (this.state.provider && this.state.address) {\n      const balance = await this.state.provider.getBalance(this.state.address)\n      this.state.balance = ethers.formatEther(balance)\n      this.emit('balanceUpdated', this.state)\n    }\n  }\n\n  async sendTransaction(transaction: ethers.TransactionRequest): Promise<string> {\n    if (!this.state.signer) {\n      throw new Error('Wallet not connected')\n    }\n\n    const tx = await this.state.signer.sendTransaction(transaction)\n    return tx.hash\n  }\n\n  async signMessage(message: string): Promise<string> {\n    if (!this.state.signer) {\n      throw new Error('Wallet not connected')\n    }\n\n    return await this.state.signer.signMessage(message)\n  }\n\n  getState(): WalletState {\n    return { ...this.state }\n  }\n\n  isConnected(): boolean {\n    return this.state.isConnected\n  }\n\n  getAddress(): string | null {\n    return this.state.address\n  }\n\n  getChainId(): number | null {\n    return this.state.chainId\n  }\n\n  getProvider(): ethers.BrowserProvider | null {\n    return this.state.provider\n  }\n\n  getSigner(): ethers.JsonRpcSigner | null {\n    return this.state.signer\n  }\n}\n\n// Extend Window interface for TypeScript\ndeclare global {\n  interface Window {\n    ethereum?: any\n  }\n}","/**\n * ERC-4337 Types\n * Defines interfaces and types for Account Abstraction\n */\n\nexport interface UserOperation {\n  sender: string\n  nonce: string\n  initCode: string\n  callData: string\n  callGasLimit: string\n  verificationGasLimit: string\n  preVerificationGas: string\n  maxFeePerGas: string\n  maxPriorityFeePerGas: string\n  paymasterAndData: string\n  signature: string\n  hash: string\n  status: 'pending' | 'included' | 'failed'\n  timestamp: number\n  txHash?: string\n}\n\nexport interface Bundle {\n  id: string\n  userOperations: UserOperation[]\n  status: 'pending' | 'submitted' | 'confirmed' | 'failed'\n  timestamp: number\n  txHash?: string\n  zkProof?: ZKProof\n  mevProtection: boolean\n  fairOrdering: boolean\n}\n\nexport interface ZKProof {\n  proof: string\n  publicSignals: string[]\n  verificationKey: string\n  circuit: string\n}\n\nexport interface SmartAccount {\n  address: string\n  owner: string\n  factory: string\n  implementation: string\n  isDeployed: boolean\n  nonce: number\n}\n\nexport interface Paymaster {\n  address: string\n  type: 'verifying' | 'deposit' | 'token'\n  supportedTokens?: string[]\n  gasPolicy?: GasPolicy\n}\n\nexport interface GasPolicy {\n  maxGasLimit: string\n  maxFeePerGas: string\n  maxPriorityFeePerGas: string\n  validUntil: number\n  validAfter: number\n}\n\nexport interface BundlerConfig {\n  entryPoint: string\n  bundlerUrl: string\n  chainId: number\n  supportedPaymasters: Paymaster[]\n  maxBundleSize: number\n  minBundleSize: number\n  bundleInterval: number // in milliseconds\n}\n\nexport interface SwapIntent {\n  id: string\n  user: string\n  fromToken: string\n  toToken: string\n  fromAmount: string\n  minToAmount: string\n  deadline: number\n  slippage: number\n  mevProtection: boolean\n  zkProof?: ZKProof\n  status: 'pending' | 'bundled' | 'executed' | 'failed'\n  timestamp: number\n}\n\nexport interface MEVProtectionData {\n  enabled: boolean\n  protectionLevel: 'basic' | 'advanced' | 'maximum'\n  fairOrderingProof?: ZKProof\n  bundlePosition?: number\n  estimatedSavings?: string\n}\n\nexport interface BundlerResponse {\n  userOpHash: string\n  bundleId?: string\n  status: 'accepted' | 'rejected'\n  reason?: string\n  estimatedGas?: string\n  estimatedTime?: number\n}\n\nexport interface UserOperationReceipt {\n  userOpHash: string\n  entryPoint: string\n  sender: string\n  nonce: string\n  paymaster?: string\n  actualGasCost: string\n  actualGasUsed: string\n  success: boolean\n  reason?: string\n  logs: Log[]\n  receipt: TransactionReceipt\n}\n\nexport interface Log {\n  address: string\n  topics: string[]\n  data: string\n  blockNumber: number\n  transactionHash: string\n  transactionIndex: number\n  blockHash: string\n  logIndex: number\n  removed: boolean\n}\n\nexport interface TransactionReceipt {\n  to: string\n  from: string\n  contractAddress?: string\n  transactionIndex: number\n  gasUsed: string\n  logsBloom: string\n  blockHash: string\n  transactionHash: string\n  logs: Log[]\n  blockNumber: number\n  confirmations: number\n  cumulativeGasUsed: string\n  effectiveGasPrice: string\n  status: number\n  type: number\n}\n\n// Constants\nexport const ENTRY_POINT_ADDRESS = '0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789'\nexport const SIMPLE_ACCOUNT_FACTORY = '0x9406Cc6185a346906296840746125a0E44976454'\n\n// Gas limits\nexport const DEFAULT_GAS_LIMITS = {\n  callGasLimit: '100000',\n  verificationGasLimit: '150000',\n  preVerificationGas: '21000',\n  maxFeePerGas: '20000000000', // 20 gwei\n  maxPriorityFeePerGas: '2000000000' // 2 gwei\n}\n\n// Utility functions\nexport function getUserOperationHash(\n  _userOp: Partial<UserOperation>,\n  _entryPoint: string,\n  _chainId: number\n): string {\n  // This would implement the actual hash calculation\n  // For now, return a placeholder\n  return `0x${Math.random().toString(16).slice(2)}`\n}\n\nexport function isUserOperationValid(userOp: UserOperation): boolean {\n  return (\n    userOp.sender !== '' &&\n    userOp.nonce !== '' &&\n    userOp.callData !== '' &&\n    userOp.signature !== ''\n  )\n}\n\nexport function estimateUserOperationGas(userOp: Partial<UserOperation>): {\n  callGasLimit: string\n  verificationGasLimit: string\n  preVerificationGas: string\n} {\n  // Basic estimation - in production this would be more sophisticated\n  return {\n    callGasLimit: userOp.callGasLimit || DEFAULT_GAS_LIMITS.callGasLimit,\n    verificationGasLimit: userOp.verificationGasLimit || DEFAULT_GAS_LIMITS.verificationGasLimit,\n    preVerificationGas: userOp.preVerificationGas || DEFAULT_GAS_LIMITS.preVerificationGas\n  }\n}\n\nexport function createSwapIntent(\n  user: string,\n  fromToken: string,\n  toToken: string,\n  fromAmount: string,\n  minToAmount: string,\n  slippage: number,\n  mevProtection = true\n): SwapIntent {\n  return {\n    id: `intent_${Date.now()}_${Math.random().toString(36).slice(2)}`,\n    user,\n    fromToken,\n    toToken,\n    fromAmount,\n    minToAmount,\n    deadline: Date.now() + 20 * 60 * 1000, // 20 minutes\n    slippage,\n    mevProtection,\n    status: 'pending',\n    timestamp: Date.now()\n  }\n}\n\nexport function createBundle(\n  userOperations: UserOperation[],\n  mevProtection = true,\n  fairOrdering = true\n): Bundle {\n  return {\n    id: `bundle_${Date.now()}_${Math.random().toString(36).slice(2)}`,\n    userOperations,\n    status: 'pending',\n    timestamp: Date.now(),\n    mevProtection,\n    fairOrdering\n  }\n}","import { ethers } from 'ethers'\nimport type { UserOperation, Bundle, SwapIntent, ZKProof, BundlerResponse } from './types'\nimport { createSwapIntent, createBundle, getUserOperationHash, DEFAULT_GAS_LIMITS } from './types'\nimport axios from 'axios'\n\n/**\n * ERC-4337 Smart Account Bundler\n * Handles user operations, fair ordering via zk-proofs, and MEV resistance\n */\nexport class SmartAccountBundler {\n  private pendingIntents: Map<string, SwapIntent> = new Map()\n  private bundleQueue: SwapIntent[] = []\n  private activeBundles: Map<string, Bundle> = new Map()\n  private readonly BUNDLE_SIZE = 5\n  private readonly BUNDLE_TIMEOUT = 10000 // 10 seconds\n\n  constructor(\n    private entryPointAddress: string,\n    private bundlerWallet: ethers.Wallet,\n    private provider: ethers.Provider\n  ) {}\n\n  /**\n   * Create a swap intent with MEV protection\n   */\n  async createSwapIntent(\n    userAddress: string,\n    fromToken: string,\n    toToken: string,\n    amount: string,\n    slippage: number = 0.5,\n    chainId: number = 1\n  ): Promise<SwapIntent> {\n    // Generate fair ordering proof (placeholder)\n    const fairOrderingProof = await this.generateFairOrderingProof({\n      userAddress,\n      fromToken,\n      toToken,\n      amount,\n      timestamp: Date.now()\n    })\n\n    // Get OKX DEX quote for expected output\n    const quote = await this.getOKXSwap({\n      chainId,\n      fromTokenAddress: fromToken,\n      toTokenAddress: toToken,\n      amount,\n      userWalletAddress: userAddress\n    })\n\n    const expectedOutput = quote?.data?.[0]?.routerResult?.toTokenAmount || '0'\n    const minToAmount = (parseFloat(expectedOutput) * (1 - slippage / 100)).toString()\n\n    // Create swap intent\n    const intent = createSwapIntent(\n      userAddress,\n      fromToken,\n      toToken,\n      amount,\n      minToAmount,\n      slippage,\n      true // MEV protection enabled\n    )\n\n    // Add ZK proof\n    intent.zkProof = fairOrderingProof\n\n    this.pendingIntents.set(intent.id, intent)\n    this.bundleQueue.push(intent)\n\n    // Trigger bundling if conditions are met\n    if (this.shouldCreateBundle()) {\n      await this.createBundle()\n    }\n\n    return intent\n  }\n\n  /**\n   * Submit a user operation to the bundler\n   */\n  async submitUserOperation(userOp: UserOperation): Promise<BundlerResponse> {\n    try {\n      // Validate user operation\n      if (!this.isValidUserOperation(userOp)) {\n        return {\n          userOpHash: userOp.hash,\n          status: 'rejected',\n          reason: 'Invalid user operation'\n        }\n      }\n\n      // Add to bundle queue\n      const intent: SwapIntent = {\n        id: userOp.hash,\n        user: userOp.sender,\n        fromToken: '', // Would be extracted from callData\n        toToken: '',   // Would be extracted from callData\n        fromAmount: '', // Would be extracted from callData\n        minToAmount: '',\n        deadline: Date.now() + 20 * 60 * 1000,\n        slippage: 0.5,\n        mevProtection: true,\n        status: 'pending',\n        timestamp: Date.now()\n      }\n\n      this.pendingIntents.set(intent.id, intent)\n      this.bundleQueue.push(intent)\n\n      // Check if we should create a bundle\n      if (this.shouldCreateBundle()) {\n        await this.createBundle()\n      }\n\n      return {\n        userOpHash: userOp.hash,\n        status: 'accepted',\n        estimatedGas: userOp.callGasLimit,\n        estimatedTime: this.BUNDLE_TIMEOUT\n      }\n    } catch (error: any) {\n      return {\n        userOpHash: userOp.hash,\n        status: 'rejected',\n        reason: error.message\n      }\n    }\n  }\n\n  /**\n   * Create ERC-4337 UserOperation from swap intent\n   */\n  private async createUserOperation(\n    intent: SwapIntent,\n    txData: any\n  ): Promise<UserOperation> {\n    const nonce = await this.getUserOpNonce(intent.user)\n    const hash = getUserOperationHash(\n      {\n        sender: intent.user,\n        nonce: nonce.toString(),\n        callData: txData.data || '0x'\n      },\n      this.entryPointAddress,\n      await this.provider.getNetwork().then(n => Number(n.chainId))\n    )\n    \n    return {\n      sender: intent.user,\n      nonce: nonce.toString(),\n      initCode: '0x',\n      callData: txData.data || '0x',\n      callGasLimit: DEFAULT_GAS_LIMITS.callGasLimit,\n      verificationGasLimit: DEFAULT_GAS_LIMITS.verificationGasLimit,\n      preVerificationGas: DEFAULT_GAS_LIMITS.preVerificationGas,\n      maxFeePerGas: DEFAULT_GAS_LIMITS.maxFeePerGas,\n      maxPriorityFeePerGas: DEFAULT_GAS_LIMITS.maxPriorityFeePerGas,\n      paymasterAndData: '0x',\n      signature: '0x',\n      hash,\n      status: 'pending',\n      timestamp: Date.now()\n    }\n  }\n\n  /**\n   * Check if we should create a bundle\n   */\n  private shouldCreateBundle(): boolean {\n    return this.bundleQueue.length >= this.BUNDLE_SIZE ||\n           (this.bundleQueue.length > 0 && this.getOldestIntentAge() > this.BUNDLE_TIMEOUT)\n  }\n\n  /**\n   * Create and submit a bundle\n   */\n  private async createBundle(): Promise<void> {\n    if (this.bundleQueue.length === 0) return\n\n    const intentsToBundle = this.bundleQueue.splice(0, this.BUNDLE_SIZE)\n    const userOps: UserOperation[] = []\n\n    // Create user operations for each intent\n    for (const intent of intentsToBundle) {\n      try {\n        // Get transaction data from OKX\n        const txData = await this.getSwapTransactionData(intent)\n        const userOp = await this.createUserOperation(intent, txData)\n        userOps.push(userOp)\n      } catch (error) {\n        console.error('Failed to create user operation for intent:', intent.id, error)\n        // Mark intent as failed\n        intent.status = 'failed'\n        this.pendingIntents.set(intent.id, intent)\n      }\n    }\n\n    if (userOps.length === 0) return\n\n    // Create bundle\n    const bundle = createBundle(userOps, true, true)\n    this.activeBundles.set(bundle.id, bundle)\n\n    try {\n      // Submit bundle to entry point\n      const tx = await this.createBundleTransaction(userOps)\n      const receipt = await tx.wait()\n      \n      // Update bundle status\n      bundle.status = 'confirmed'\n      bundle.txHash = receipt.transactionHash\n      this.activeBundles.set(bundle.id, bundle)\n\n      // Update intent statuses\n      for (const intent of intentsToBundle) {\n        intent.status = 'executed'\n        this.pendingIntents.set(intent.id, intent)\n      }\n\n      console.log('Bundle executed successfully:', bundle.id, receipt.transactionHash)\n    } catch (error) {\n      console.error('Failed to execute bundle:', bundle.id, error)\n      \n      // Update bundle status\n      bundle.status = 'failed'\n      this.activeBundles.set(bundle.id, bundle)\n\n      // Update intent statuses\n      for (const intent of intentsToBundle) {\n        intent.status = 'failed'\n        this.pendingIntents.set(intent.id, intent)\n      }\n    }\n  }\n\n  /**\n   * Create bundle transaction\n   */\n  private async createBundleTransaction(userOps: UserOperation[]) {\n    // This would interact with the EntryPoint contract\n    // For now, return a mock transaction\n    const entryPoint = new ethers.Contract(\n      this.entryPointAddress,\n      ['function handleOps(tuple[] calldata ops, address payable beneficiary)'],\n      this.bundlerWallet\n    )\n\n    // Convert UserOperations to the format expected by EntryPoint\n    const formattedOps = userOps.map(op => ([\n      op.sender,\n      op.nonce,\n      op.initCode,\n      op.callData,\n      op.callGasLimit,\n      op.verificationGasLimit,\n      op.preVerificationGas,\n      op.maxFeePerGas,\n      op.maxPriorityFeePerGas,\n      op.paymasterAndData,\n      op.signature\n    ]))\n\n    return entryPoint.handleOps(formattedOps, this.bundlerWallet.address)\n  }\n\n  /**\n   * Get user operation nonce\n   */\n  private async getUserOpNonce(_sender: string): Promise<number> {\n    // This would query the EntryPoint contract for the nonce\n    // For now, return a mock nonce\n    return Math.floor(Math.random() * 1000000)\n  }\n\n  /**\n   * Get oldest intent age in milliseconds\n   */\n  private getOldestIntentAge(): number {\n    if (this.bundleQueue.length === 0) return 0\n    const oldest = Math.min(...this.bundleQueue.map(intent => intent.timestamp))\n    return Date.now() - oldest\n  }\n\n  /**\n   * Validate user operation\n   */\n  private isValidUserOperation(userOp: UserOperation): boolean {\n    return (\n      userOp.sender !== '' &&\n      userOp.nonce !== '' &&\n      userOp.callData !== '' &&\n      userOp.signature !== ''\n    )\n  }\n\n  /**\n   * Generate fair ordering proof (placeholder)\n   */\n  private async generateFairOrderingProof(data: any): Promise<ZKProof> {\n    // This would generate an actual ZK proof\n    // For now, return a mock proof\n    return {\n      proof: '0x' + '0'.repeat(512), // Mock proof\n      publicSignals: [data.userAddress, data.fromToken, data.toToken, data.amount.toString()],\n      verificationKey: '0x' + '1'.repeat(64),\n      circuit: 'fair-ordering-v1'\n    }\n  }\n\n  /**\n   * Get OKX swap quote\n   */\n  private async getOKXSwap(params: any): Promise<any> {\n    try {\n      const response = await axios.get('https://www.okx.com/api/v5/dex/aggregator/swap', {\n        params: {\n          chainId: params.chainId,\n          fromTokenAddress: params.fromTokenAddress,\n          toTokenAddress: params.toTokenAddress,\n          amount: params.amount,\n          userWalletAddress: params.userWalletAddress,\n          slippage: '0.5'\n        }\n      })\n      return response.data\n    } catch (error) {\n      console.error('Failed to get OKX swap quote:', error)\n      return null\n    }\n  }\n\n  /**\n   * Get swap transaction data\n   */\n  private async getSwapTransactionData(intent: SwapIntent): Promise<any> {\n    const quote = await this.getOKXSwap({\n      chainId: 1, // Default to Ethereum\n      fromTokenAddress: intent.fromToken,\n      toTokenAddress: intent.toToken,\n      amount: intent.fromAmount,\n      userWalletAddress: intent.user\n    })\n\n    return quote?.data?.[0]?.tx || { data: '0x' }\n  }\n\n  // Public methods\n  getPendingIntents(): SwapIntent[] {\n    return Array.from(this.pendingIntents.values())\n  }\n\n  getActiveBundles(): Bundle[] {\n    return Array.from(this.activeBundles.values())\n  }\n\n  getIntent(id: string): SwapIntent | undefined {\n    return this.pendingIntents.get(id)\n  }\n\n  getBundle(id: string): Bundle | undefined {\n    return this.activeBundles.get(id)\n  }\n\n  async calculateMEVSavings(intent: SwapIntent): Promise<string> {\n    // This would calculate actual MEV savings\n    // For now, return a mock value\n    const savings = parseFloat(intent.fromAmount) * 0.001 // 0.1% savings\n    return savings.toString()\n  }\n}\n\n// Singleton instance\nlet bundlerInstance: SmartAccountBundler | null = null\n\nexport function getBundler(): SmartAccountBundler | null {\n  return bundlerInstance\n}\n\nexport function initializeBundler(\n  entryPointAddress: string,\n  bundlerWallet: ethers.Wallet,\n  provider: ethers.Provider\n): SmartAccountBundler {\n  bundlerInstance = new SmartAccountBundler(entryPointAddress, bundlerWallet, provider)\n  return bundlerInstance\n}","import { ethers } from 'ethers'\nimport { Token, TokenBalance } from '../libs/token/types'\n\nconst ERC20_ABI = [\n  'function balanceOf(address owner) view returns (uint256)',\n  'function decimals() view returns (uint8)',\n  'function symbol() view returns (string)',\n  'function name() view returns (string)',\n  'function allowance(address owner, address spender) view returns (uint256)',\n  'function approve(address spender, uint256 amount) returns (bool)'\n]\n\n/**\n * Get token balance for an address\n */\nexport async function getBalance(\n  tokenAddress: string,\n  userAddress: string,\n  provider: ethers.Provider,\n  chainId: number = 1\n): Promise<TokenBalance> {\n  try {\n    if (tokenAddress === ethers.ZeroAddress || tokenAddress.toLowerCase() === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee') {\n      // Native token (ETH)\n      const balance = await provider.getBalance(userAddress)\n      return {\n        token: {\n          address: ethers.ZeroAddress,\n          symbol: 'ETH',\n          decimals: 18,\n          name: 'Ethereum',\n          chainId\n        },\n        balance: balance.toString(),\n        formattedBalance: ethers.formatEther(balance)\n      }\n    } else {\n      // ERC20 token\n      const contract = new ethers.Contract(tokenAddress, ERC20_ABI, provider)\n      \n      const [balance, decimals, symbol, name] = await Promise.all([\n        contract.balanceOf(userAddress),\n        contract.decimals(),\n        contract.symbol(),\n        contract.name()\n      ])\n\n      return {\n        token: {\n          address: tokenAddress,\n          symbol,\n          decimals,\n          name,\n          chainId\n        },\n        balance: balance.toString(),\n        formattedBalance: ethers.formatUnits(balance, decimals)\n      }\n    }\n  } catch (error) {\n    console.error('Error getting token balance:', error)\n    throw error\n  }\n}\n\n/**\n * Approve token allowance\n */\nexport async function approveAllowance(\n  tokenAddress: string,\n  spenderAddress: string,\n  amount: string,\n  signer: ethers.Signer\n): Promise<ethers.TransactionResponse> {\n  try {\n    if (tokenAddress === ethers.ZeroAddress || tokenAddress.toLowerCase() === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee') {\n      throw new Error('Cannot approve native token')\n    }\n\n    const contract = new ethers.Contract(tokenAddress, ERC20_ABI, signer)\n    const tx = await contract.approve(spenderAddress, amount)\n    \n    return tx\n  } catch (error) {\n    console.error('Error approving token allowance:', error)\n    throw error\n  }\n}\n\n/**\n * Check token allowance\n */\nexport async function checkAllowance(\n  tokenAddress: string,\n  ownerAddress: string,\n  spenderAddress: string,\n  provider: ethers.Provider\n): Promise<string> {\n  try {\n    if (tokenAddress === ethers.ZeroAddress || tokenAddress.toLowerCase() === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee') {\n      return ethers.MaxUint256.toString() // Native token doesn't need approval\n    }\n\n    const contract = new ethers.Contract(tokenAddress, ERC20_ABI, provider)\n    const allowance = await contract.allowance(ownerAddress, spenderAddress)\n    \n    return allowance.toString()\n  } catch (error) {\n    console.error('Error checking token allowance:', error)\n    throw error\n  }\n}\n\n/**\n * Get token information\n */\nexport async function getTokenInfo(\n  tokenAddress: string,\n  provider: ethers.Provider,\n  chainId: number = 1\n): Promise<Token> {\n  try {\n    if (tokenAddress === ethers.ZeroAddress || tokenAddress.toLowerCase() === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee') {\n      return {\n        address: ethers.ZeroAddress,\n        symbol: 'ETH',\n        decimals: 18,\n        name: 'Ethereum',\n        chainId\n      }\n    }\n\n    const contract = new ethers.Contract(tokenAddress, ERC20_ABI, provider)\n    \n    const [decimals, symbol, name] = await Promise.all([\n      contract.decimals(),\n      contract.symbol(),\n      contract.name()\n    ])\n\n    return {\n      address: tokenAddress,\n      symbol,\n      decimals,\n      name,\n      chainId\n    }\n  } catch (error) {\n    console.error('Error getting token info:', error)\n    throw error\n  }\n}","import axios from 'axios'\nimport { TokenQuote } from '../libs/token/types'\n\nexport interface OKXQuoteArgs {\n  fromTokenAddress: string\n  toTokenAddress: string\n  amount: string\n  chainId: number\n  slippage?: number\n}\n\nexport interface OKXSwapArgs extends OKXQuoteArgs {\n  userWalletAddress: string\n  referrerAddress?: string\n}\n\nexport interface OKXQuoteResponse {\n  code: string\n  msg: string\n  data: [{\n    chainId: string\n    dexRouterList: Array<{\n      router: string\n      routerPercent: string\n      subRouterList: Array<{\n        dexProtocol: string\n        percent: string\n      }>\n    }>\n    estimateGasFee: string\n    fromToken: {\n      tokenContractAddress: string\n      tokenSymbol: string\n      tokenUnitPrice: string\n    }\n    fromTokenAmount: string\n    toToken: {\n      tokenContractAddress: string\n      tokenSymbol: string\n      tokenUnitPrice: string\n    }\n    toTokenAmount: string\n    tradeFee: string\n  }]\n}\n\nexport interface OKXSwapResponse {\n  code: string\n  msg: string\n  data: [{\n    tx: {\n      data: string\n      from: string\n      gas: string\n      gasPrice: string\n      to: string\n      value: string\n    }\n    routerResult: {\n      chainId: string\n      dexRouterList: any[]\n      estimateGasFee: string\n      fromToken: any\n      fromTokenAmount: string\n      toToken: any\n      toTokenAmount: string\n      tradeFee: string\n    }\n  }]\n}\n\nconst OKX_DEX_API_BASE = 'https://www.okx.com/api/v5/dex/aggregator'\n\n/**\n * Get a quote from OKX DEX aggregator\n */\nexport async function getOKXQuote(args: OKXQuoteArgs): Promise<TokenQuote> {\n  try {\n    const params = new URLSearchParams({\n      chainId: args.chainId.toString(),\n      fromTokenAddress: args.fromTokenAddress,\n      toTokenAddress: args.toTokenAddress,\n      amount: args.amount,\n      slippage: (args.slippage || 0.5).toString()\n    })\n\n    const response = await axios.get<OKXQuoteResponse>(\n      `${OKX_DEX_API_BASE}/quote?${params.toString()}`\n    )\n\n    if (response.data.code !== '0' || !response.data.data?.[0]) {\n      throw new Error(response.data.msg || 'Failed to get quote')\n    }\n\n    const data = response.data.data[0]\n    \n    return {\n      fromToken: {\n        address: data.fromToken.tokenContractAddress,\n        symbol: data.fromToken.tokenSymbol,\n        decimals: 18, // Default, should be fetched from token contract\n        name: data.fromToken.tokenSymbol,\n        chainId: args.chainId\n      },\n      toToken: {\n        address: data.toToken.tokenContractAddress,\n        symbol: data.toToken.tokenSymbol,\n        decimals: 18, // Default, should be fetched from token contract\n        name: data.toToken.tokenSymbol,\n        chainId: args.chainId\n      },\n      fromAmount: data.fromTokenAmount,\n      toAmount: data.toTokenAmount,\n      estimatedGas: data.estimateGasFee,\n      route: data.dexRouterList.map(router => ({\n        protocol: router.router,\n        percentage: parseFloat(router.routerPercent),\n        fromToken: {\n          address: data.fromToken.tokenContractAddress,\n          symbol: data.fromToken.tokenSymbol,\n          decimals: 18,\n          name: data.fromToken.tokenSymbol,\n          chainId: args.chainId\n        },\n        toToken: {\n          address: data.toToken.tokenContractAddress,\n          symbol: data.toToken.tokenSymbol,\n          decimals: 18,\n          name: data.toToken.tokenSymbol,\n          chainId: args.chainId\n        }\n      })),\n      priceImpact: 0, // Not provided by OKX API\n      rate: (parseFloat(data.toTokenAmount) / Math.max(parseFloat(data.fromTokenAmount), 1e-18)).toString(),\n      validUntil: Date.now() + 60 * 1000\n    }\n  } catch (error) {\n    console.error('OKX quote error:', error)\n    throw error\n  }\n}\n\n/**\n * Get swap transaction data from OKX DEX aggregator\n */\nexport async function getOKXSwap(args: OKXSwapArgs): Promise<any> {\n  try {\n    const params = new URLSearchParams({\n      chainId: args.chainId.toString(),\n      fromTokenAddress: args.fromTokenAddress,\n      toTokenAddress: args.toTokenAddress,\n      amount: args.amount,\n      slippage: (args.slippage || 0.5).toString(),\n      userWalletAddress: args.userWalletAddress\n    })\n\n    if (args.referrerAddress) {\n      params.append('referrerAddress', args.referrerAddress)\n    }\n\n    const response = await axios.get<OKXSwapResponse>(\n      `${OKX_DEX_API_BASE}/swap?${params.toString()}`\n    )\n\n    if (response.data.code !== '0' || !response.data.data?.[0]) {\n      throw new Error(response.data.msg || 'Failed to get swap data')\n    }\n\n    return response.data.data[0]\n  } catch (error) {\n    console.error('OKX swap error:', error)\n    throw error\n  }\n}","import { ethers } from 'ethers'\nimport { SimpleEventEmitter } from '@/utils/emitter'\nimport { WalletManager } from './wallet'\nimport { getBundler, initializeBundler } from '../libs/erc4337/bundler'\nimport { Token } from '../libs/token/types'\nimport { approveAllowance } from '../utils/token'\nimport { getOKXQuote, getOKXSwap, OKXSwapArgs, OKXQuoteArgs } from '../api/okx-dex'\n\nexport interface SwapParams {\n  fromToken: Token\n  toToken: Token\n  amount: string\n  slippage: number\n  useSmartAccount: boolean\n}\n\nexport interface SwapQuote {\n  fromAmount: string\n  toAmount: string\n  estimatedGas: string\n  priceImpact: string\n  route: string[]\n}\n\nexport interface SwapResult {\n  txHash: string\n  bundleId?: string\n}\n\n/**\n * DEX Aggregator using ethers.js\n * Handles token swaps, quotes, and smart account integration\n */\nexport class DEXAggregator extends SimpleEventEmitter {\n  private walletManager: WalletManager\n  private bundlerInitialized = false\n  private availableTokens: Token[] = []\n  private currentQuote: SwapQuote | null = null\n\n  constructor(walletManager: WalletManager) {\n    super()\n    this.walletManager = walletManager\n    this.setupEventListeners()\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      // Load available tokens\n      await this.loadTokens()\n      console.log('‚úÖ DEX Aggregator initialized')\n    } catch (error) {\n      console.error('‚ùå Failed to initialize DEX Aggregator:', error)\n      throw error\n    }\n  }\n\n  private setupEventListeners(): void {\n    this.walletManager.on('chainChanged', () => {\n      this.loadTokens()\n    })\n  }\n\n  private async loadTokens(): Promise<void> {\n    const chainId = this.walletManager.getChainId()\n    if (!chainId) return\n\n    try {\n      // For now, use default tokens from the types file\n      this.availableTokens = Object.values(require('../libs/token/types').POPULAR_TOKENS[chainId] || {})\n      this.emit('tokensLoaded', this.availableTokens)\n    } catch (error) {\n      console.error('Failed to load tokens:', error)\n      this.availableTokens = []\n    }\n  }\n\n  async getQuote(params: Omit<SwapParams, 'useSmartAccount'>): Promise<SwapQuote> {\n    const { fromToken, toToken, amount } = params\n    const chainId = this.walletManager.getChainId()\n    const userAddress = this.walletManager.getAddress()\n\n    if (!chainId || !userAddress) {\n      throw new Error('Wallet not connected')\n    }\n\n    try {\n      const quoteArgs: OKXQuoteArgs = {\n        chainId,\n        fromTokenAddress: fromToken.address || '',\n        toTokenAddress: toToken.address || '',\n        amount\n      }\n\n      const quoteResponse = await getOKXQuote(quoteArgs)\n\n      this.currentQuote = {\n        fromAmount: amount,\n        toAmount: quoteResponse.toAmount,\n        estimatedGas: quoteResponse.estimatedGas || '0',\n        priceImpact: this.calculatePriceImpact(amount, quoteResponse.toAmount),\n        route: quoteResponse.route?.map((r: any) => r.protocol) || []\n      }\n\n      this.emit('quoteUpdated', this.currentQuote)\n      return this.currentQuote\n    } catch (error) {\n      console.error('Failed to get quote:', error)\n      throw new Error('Failed to get swap quote')\n    }\n  }\n\n  async executeSwap(params: SwapParams): Promise<SwapResult> {\n    const { useSmartAccount } = params\n    const chainId = this.walletManager.getChainId()\n    const userAddress = this.walletManager.getAddress()\n    const provider = this.walletManager.getProvider()\n\n    if (!chainId || !userAddress || !provider) {\n      throw new Error('Wallet not connected')\n    }\n\n    this.emit('swapStarted', params)\n\n    try {\n      // Initialize bundler if using smart account\n      if (useSmartAccount && !this.bundlerInitialized) {\n        await this.initializeBundler()\n      }\n\n      if (useSmartAccount && this.bundlerInitialized) {\n        return await this.executeSmartAccountSwap(params)\n      } else {\n        return await this.executeDirectSwap(params)\n      }\n    } catch (error) {\n      this.emit('swapFailed', error)\n      throw error\n    }\n  }\n\n  private async initializeBundler(): Promise<void> {\n    const provider = this.walletManager.getProvider()\n    if (!provider) throw new Error('Provider not available')\n\n    // Demo bundler wallet - in production, use proper key management\n    const bundlerPrivateKey = '0x' + '1'.repeat(64)\n    const bundlerWallet = new ethers.Wallet(bundlerPrivateKey)\n    const ethersProvider = new ethers.JsonRpcProvider('https://eth.llamarpc.com')\n\n    initializeBundler(\n      '0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789', // EntryPoint v0.6\n      bundlerWallet,\n      ethersProvider\n    )\n\n    this.bundlerInitialized = true\n  }\n\n  private async executeSmartAccountSwap(params: SwapParams): Promise<SwapResult> {\n    const { fromToken, toToken, amount } = params\n    const chainId = this.walletManager.getChainId()!\n    const userAddress = this.walletManager.getAddress()!\n\n    const bundler = getBundler()\n    if (!bundler) {\n      throw new Error('Bundler not initialized')\n    }\n\n    // Create swap intent with MEV protection\n    const intent = await bundler.createSwapIntent(\n      userAddress,\n      fromToken.address || '',\n      toToken.address || '',\n      amount,\n      chainId\n    )\n\n    this.emit('bundleIntentCreated', intent)\n\n    // Wait for bundle execution\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('Bundle execution timeout'))\n      }, 30000) // 30 second timeout\n\n      const checkBundle = setInterval(async () => {\n        const currentIntent = bundler.getIntent(intent.id)\n        if (currentIntent?.status === 'executed') {\n          clearInterval(checkBundle)\n          clearTimeout(timeout)\n          resolve({\n            txHash: intent.id, // Use intent ID as txHash for mock\n            bundleId: intent.id\n          })\n        } else if (currentIntent?.status === 'failed') {\n          clearInterval(checkBundle)\n          clearTimeout(timeout)\n          reject(new Error('Bundle execution failed'))\n        }\n      }, 1000)\n    })\n  }\n\n  private async executeDirectSwap(params: SwapParams): Promise<SwapResult> {\n    const { fromToken, toToken, amount, slippage } = params\n    const chainId = this.walletManager.getChainId()!\n    const userAddress = this.walletManager.getAddress()!\n\n    // Get swap data from OKX\n    const swapArgs: OKXSwapArgs = {\n      chainId,\n      fromTokenAddress: fromToken.address || '',\n      toTokenAddress: toToken.address || '',\n      amount,\n      userWalletAddress: userAddress,\n      slippage\n    }\n\n    const swapResponse = await getOKXSwap(swapArgs)\n    const txData = swapResponse.tx\n\n    // Check and approve token if needed\n    const allowanceTarget = txData.to\n    const isApproved = await this.checkTokenApproval(fromToken, allowanceTarget, amount)\n    if (!isApproved) {\n      await this.approveToken(fromToken, allowanceTarget, amount)\n    }\n\n    // Execute transaction using wallet manager\n    const txHash = await this.walletManager.sendTransaction({\n      to: txData.to,\n      data: txData.data,\n      value: txData.value || '0x0',\n      gasLimit: txData.gas || undefined\n    })\n\n    this.emit('swapCompleted', { txHash })\n    return { txHash }\n  }\n\n  private async checkTokenApproval(\n    token: Token,\n    spender: string,\n    amount: string\n  ): Promise<boolean> {\n    if (token.address === ethers.ZeroAddress) return true\n\n    const signer = this.walletManager.getSigner()\n    if (!signer) return false\n\n    const erc20 = new ethers.Contract(\n      token.address,\n      [\n        'function allowance(address owner, address spender) view returns (uint256)'\n      ],\n      signer\n    )\n\n    const owner = await signer.getAddress()\n    const allowance = await erc20.allowance(owner, spender)\n    const amountWei = ethers.parseUnits(amount, token.decimals)\n    return allowance >= amountWei\n  }\n\n  private async approveToken(\n    token: Token,\n    spender: string,\n    amount: string\n  ): Promise<void> {\n    const signer = this.walletManager.getSigner()\n    if (!signer) throw new Error('Signer not available')\n\n    await approveAllowance(token.address!, spender, amount, signer)\n  }\n\n  private calculatePriceImpact(\n    fromAmount: string,\n    toAmount: string\n  ): string {\n    try {\n      const from = parseFloat(fromAmount)\n      const to = parseFloat(toAmount)\n      if (!isFinite(from) || from <= 0) return '0.00'\n      const rate = to / from\n      const impact = Math.max(0, (1 - rate) * 100)\n      return impact.toFixed(2)\n    } catch {\n      return '0.00'\n    }\n  }\n\n  getAvailableTokens(): Token[] {\n    return this.availableTokens\n  }\n\n  getCurrentQuote(): SwapQuote | null {\n    return this.currentQuote\n  }\n\n  async getTokenBalance(token: Token): Promise<string> {\n    const provider = this.walletManager.getProvider()\n    const address = this.walletManager.getAddress()\n    if (!provider || !address) return '0'\n\n    if (token.address === ethers.ZeroAddress) {\n      const balance = await provider.getBalance(address)\n      return ethers.formatEther(balance)\n    }\n\n    const erc20 = new ethers.Contract(\n      token.address,\n      [\n        'function balanceOf(address owner) view returns (uint256)',\n        'function decimals() view returns (uint8)'\n      ],\n      provider\n    )\n\n    const [balance, decimals] = await Promise.all([\n      erc20.balanceOf(address),\n      erc20.decimals()\n    ])\n\n    return ethers.formatUnits(balance, decimals)\n  }\n}","/**\n * Debounce function that delays the execution of a function until after a specified delay\n * @param func - The function to debounce\n * @param delay - The delay in milliseconds\n * @returns A debounced version of the function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: NodeJS.Timeout | null = null\n\n  return (...args: Parameters<T>) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n    \n    timeoutId = setTimeout(() => {\n      func(...args)\n    }, delay)\n  }\n}\n\nexport default debounce","import { WalletManager } from '../core/wallet'\nimport { DEXAggregator, type SwapParams } from '../core/dex'\nimport { NotificationManager } from './notifications'\nimport type { Token } from '../libs/token/types'\nimport { SUPPORTED_CHAINS } from '../config/chains'\nimport { debounce } from '../utils/debounce'\n\n/**\n * UI Manager\n * Handles all user interface interactions and state management\n */\nexport class UIManager {\n  private walletManager: WalletManager\n  private dexAggregator: DEXAggregator\n  private notificationManager: NotificationManager\n  \n  private selectedFromToken: Token | null = null\n  private selectedToToken: Token | null = null\n  private fromAmount = ''\n  private slippage = 0.5\n  private useSmartAccount = false\n  private isSwapping = false\n  \n  // UI Elements\n  private elements: Record<string, HTMLElement> = {}\n\n  constructor(\n    walletManager: WalletManager,\n    dexAggregator: DEXAggregator,\n    notificationManager: NotificationManager\n  ) {\n    this.walletManager = walletManager\n    this.dexAggregator = dexAggregator\n    this.notificationManager = notificationManager\n  }\n\n  initialize(): void {\n    this.cacheElements()\n    this.setupEventListeners()\n    this.setupServiceListeners()\n    this.updateUI()\n    console.log('‚úÖ UI Manager initialized')\n  }\n\n  private cacheElements(): void {\n    const elementIds = [\n      'connect-wallet', 'chain-selector', 'from-amount', 'to-amount',\n      'from-token-selector', 'to-token-selector', 'switch-tokens',\n      'smart-account-toggle', 'swap-btn', 'swap-btn-text', 'swap-loading',\n      'from-balance', 'to-balance', 'tx-info', 'estimated-gas', 'price-impact',\n      'token-selector-modal', 'token-search', 'token-list'\n    ]\n\n    elementIds.forEach(id => {\n      const element = document.getElementById(id)\n      if (element) {\n        this.elements[id] = element\n      } else {\n        console.warn(`Element with id '${id}' not found`)\n      }\n    })\n  }\n\n  private setupEventListeners(): void {\n    // Wallet connection\n    this.elements['connect-wallet']?.addEventListener('click', () => {\n      this.handleWalletConnect()\n    })\n\n    // Token amount input\n    const fromAmountInput = this.elements['from-amount'] as HTMLInputElement\n    if (fromAmountInput) {\n      fromAmountInput.addEventListener('input', debounce(() => {\n        this.handleAmountChange(fromAmountInput.value)\n      }, 500))\n    }\n\n    // Token selectors\n    this.elements['from-token-selector']?.addEventListener('click', () => {\n      this.openTokenSelector('from')\n    })\n\n    this.elements['to-token-selector']?.addEventListener('click', () => {\n      this.openTokenSelector('to')\n    })\n\n    // Switch tokens\n    this.elements['switch-tokens']?.addEventListener('click', () => {\n      this.switchTokens()\n    })\n\n    // Smart account toggle\n    const smartAccountToggle = this.elements['smart-account-toggle'] as HTMLInputElement\n    if (smartAccountToggle) {\n      smartAccountToggle.addEventListener('change', () => {\n        this.useSmartAccount = smartAccountToggle.checked\n        this.updateSwapButton()\n      })\n    }\n\n    // Swap button\n    this.elements['swap-btn']?.addEventListener('click', () => {\n      this.handleSwap()\n    })\n\n    // Token search\n    const tokenSearch = this.elements['token-search'] as HTMLInputElement\n    if (tokenSearch) {\n      tokenSearch.addEventListener('input', debounce(() => {\n        this.filterTokens(tokenSearch.value)\n      }, 300))\n    }\n  }\n\n  private setupServiceListeners(): void {\n    // Wallet events\n    this.walletManager.on('connected', () => {\n      this.updateUI()\n      this.notificationManager.showSuccess('Wallet connected successfully')\n    })\n\n    this.walletManager.on('disconnected', () => {\n      this.updateUI()\n      this.notificationManager.showInfo('Wallet disconnected')\n    })\n\n    this.walletManager.on('chainChanged', () => {\n      this.updateUI()\n      this.loadTokenBalances()\n    })\n\n    this.walletManager.on('accountChanged', () => {\n      this.updateUI()\n      this.loadTokenBalances()\n    })\n\n    // DEX events\n    this.dexAggregator.on('tokensLoaded', (tokens: Token[]) => {\n      this.populateTokenList(tokens)\n    })\n\n    this.dexAggregator.on('quoteUpdated', (quote) => {\n      this.updateQuoteDisplay(quote)\n    })\n\n    this.dexAggregator.on('swapStarted', () => {\n      this.isSwapping = true\n      this.updateSwapButton()\n    })\n\n    this.dexAggregator.on('swapExecuted', (result) => {\n      this.isSwapping = false\n      this.updateSwapButton()\n      this.notificationManager.showSuccess(\n        `Swap executed! <a href=\"${this.getExplorerUrl(result.txHash)}\" target=\"_blank\">View Transaction</a>`\n      )\n    })\n\n    this.dexAggregator.on('swapFailed', (error) => {\n      this.isSwapping = false\n      this.updateSwapButton()\n      this.notificationManager.showError(`Swap failed: ${error.message}`)\n    })\n  }\n\n  private async handleWalletConnect(): Promise<void> {\n    try {\n      if (this.walletManager.isConnected()) {\n        await this.walletManager.disconnect()\n      } else {\n        await this.walletManager.connectWallet()\n      }\n    } catch (error: any) {\n      this.notificationManager.showError(`Failed to connect wallet: ${error.message}`)\n    }\n  }\n\n  private async handleAmountChange(amount: string): Promise<void> {\n    this.fromAmount = amount\n    \n    if (this.selectedFromToken && this.selectedToToken && amount && parseFloat(amount) > 0) {\n      try {\n        await this.dexAggregator.getQuote({\n          fromToken: this.selectedFromToken,\n          toToken: this.selectedToToken,\n          amount,\n          slippage: this.slippage\n        })\n      } catch (error) {\n        console.error('Failed to get quote:', error)\n      }\n    } else {\n      this.clearQuoteDisplay()\n    }\n  }\n\n  private openTokenSelector(type: 'from' | 'to'): void {\n    const modal = this.elements['token-selector-modal']\n    if (modal) {\n      modal.classList.add('modal-open')\n      modal.setAttribute('data-token-type', type)\n      \n      // Focus search input\n      const searchInput = this.elements['token-search'] as HTMLInputElement\n      if (searchInput) {\n        searchInput.value = ''\n        searchInput.focus()\n      }\n      \n      // Show all tokens\n      this.filterTokens('')\n    }\n  }\n\n  private switchTokens(): void {\n    const temp = this.selectedFromToken\n    this.selectedFromToken = this.selectedToToken\n    this.selectedToToken = temp\n    \n    this.updateTokenSelectors()\n    this.loadTokenBalances()\n    \n    if (this.fromAmount) {\n      this.handleAmountChange(this.fromAmount)\n    }\n  }\n\n  private async handleSwap(): Promise<void> {\n    if (!this.selectedFromToken || !this.selectedToToken || !this.fromAmount) {\n      this.notificationManager.showError('Please select tokens and enter amount')\n      return\n    }\n\n    if (!this.walletManager.isConnected()) {\n      this.notificationManager.showError('Please connect your wallet')\n      return\n    }\n\n    const swapParams: SwapParams = {\n      fromToken: this.selectedFromToken,\n      toToken: this.selectedToToken,\n      amount: this.fromAmount,\n      slippage: this.slippage,\n      useSmartAccount: this.useSmartAccount\n    }\n\n    try {\n      await this.dexAggregator.executeSwap(swapParams)\n    } catch (error: any) {\n      this.notificationManager.showError(`Swap failed: ${error.message}`)\n    }\n  }\n\n  private populateTokenList(tokens: Token[]): void {\n    const tokenList = this.elements['token-list']\n    if (!tokenList) return\n\n    tokenList.innerHTML = ''\n    \n    tokens.forEach(token => {\n      const tokenItem = this.createTokenListItem(token)\n      tokenList.appendChild(tokenItem)\n    })\n  }\n\n  private createTokenListItem(token: Token): HTMLElement {\n    const item = document.createElement('div')\n    item.className = 'flex items-center space-x-3 p-3 hover:bg-base-200 cursor-pointer rounded-lg'\n    \n    item.innerHTML = `\n      <div class=\"avatar\">\n        <div class=\"w-8 h-8 rounded-full\">\n          <img src=\"${token.logoURI || '/default-token.svg'}\" alt=\"${token.symbol}\" />\n        </div>\n      </div>\n      <div class=\"flex-1\">\n        <div class=\"font-medium\">${token.symbol}</div>\n        <div class=\"text-sm text-base-content/60\">${token.name}</div>\n      </div>\n      <div class=\"text-right\">\n        <div class=\"font-medium\" data-token-balance=\"${token.address}\">0</div>\n      </div>\n    `\n    \n    item.addEventListener('click', () => {\n      this.selectToken(token)\n    })\n    \n    return item\n  }\n\n  private selectToken(token: Token): void {\n    const modal = this.elements['token-selector-modal']\n    const tokenType = modal?.getAttribute('data-token-type')\n    \n    if (tokenType === 'from') {\n      this.selectedFromToken = token\n    } else if (tokenType === 'to') {\n      this.selectedToToken = token\n    }\n    \n    this.updateTokenSelectors()\n    this.loadTokenBalances()\n    \n    // Close modal\n    modal?.classList.remove('modal-open')\n    \n    // Update quote if both tokens selected\n    if (this.selectedFromToken && this.selectedToToken && this.fromAmount) {\n      this.handleAmountChange(this.fromAmount)\n    }\n  }\n\n  private filterTokens(query: string): void {\n    const tokens = this.dexAggregator.getAvailableTokens()\n    const filteredTokens = tokens.filter(token => \n      token.name.toLowerCase().includes(query.toLowerCase()) ||\n      token.symbol.toLowerCase().includes(query.toLowerCase())\n    )\n    \n    this.populateTokenList(filteredTokens)\n  }\n\n  private updateUI(): void {\n    this.updateWalletButton()\n    this.updateChainSelector()\n    this.updateSwapButton()\n    this.loadTokenBalances()\n  }\n\n  private updateWalletButton(): void {\n    const button = this.elements['connect-wallet']\n    if (!button) return\n\n    const walletState = this.walletManager.getState()\n    \n    if (walletState.isConnected && walletState.address) {\n      button.textContent = `${walletState.address.slice(0, 6)}...${walletState.address.slice(-4)}`\n      button.className = 'btn btn-outline'\n    } else {\n      button.textContent = 'Connect Wallet'\n      button.className = 'btn btn-primary'\n    }\n  }\n\n  private updateChainSelector(): void {\n    const selector = this.elements['chain-selector']\n    if (!selector) return\n\n    const chainId = this.walletManager.getChainId()\n    const chain = chainId ? SUPPORTED_CHAINS[chainId] : null\n    \n    if (chain) {\n      selector.innerHTML = `\n        <div class=\"flex items-center space-x-2\">\n          <span>${chain.name}</span>\n        </div>\n      `\n    } else {\n      selector.innerHTML = '<span>Select Network</span>'\n    }\n  }\n\n  private updateTokenSelectors(): void {\n    this.updateTokenSelector('from', this.selectedFromToken)\n    this.updateTokenSelector('to', this.selectedToToken)\n  }\n\n  private updateTokenSelector(type: 'from' | 'to', token: Token | null): void {\n    const selector = this.elements[`${type}-token-selector`]\n    if (!selector) return\n\n    if (token) {\n      selector.innerHTML = `\n        <div class=\"flex items-center space-x-2\">\n          <img src=\"${token.logoURI || '/default-token.svg'}\" alt=\"${token.symbol}\" class=\"w-6 h-6 rounded-full\" />\n          <span>${token.symbol}</span>\n        </div>\n      `\n    } else {\n      selector.innerHTML = '<span>Select Token</span>'\n    }\n  }\n\n  private updateSwapButton(): void {\n    const button = this.elements['swap-btn']\n    const buttonText = this.elements['swap-btn-text']\n    const loading = this.elements['swap-loading']\n    \n    if (!button || !buttonText || !loading) return\n\n    if (this.isSwapping) {\n      button.setAttribute('disabled', 'true')\n      buttonText.textContent = 'Swapping...'\n      loading.classList.remove('hidden')\n    } else if (!this.walletManager.isConnected()) {\n      button.setAttribute('disabled', 'true')\n      buttonText.textContent = 'Connect Wallet'\n      loading.classList.add('hidden')\n    } else if (!this.selectedFromToken || !this.selectedToToken) {\n      button.setAttribute('disabled', 'true')\n      buttonText.textContent = 'Select Tokens'\n      loading.classList.add('hidden')\n    } else if (!this.fromAmount || parseFloat(this.fromAmount) <= 0) {\n      button.setAttribute('disabled', 'true')\n      buttonText.textContent = 'Enter Amount'\n      loading.classList.add('hidden')\n    } else {\n      button.removeAttribute('disabled')\n      buttonText.textContent = this.useSmartAccount ? 'Swap with MEV Protection' : 'Swap'\n      loading.classList.add('hidden')\n    }\n  }\n\n  private updateQuoteDisplay(quote: any): void {\n    const toAmountInput = this.elements['to-amount'] as HTMLInputElement\n    const txInfo = this.elements['tx-info']\n    const estimatedGas = this.elements['estimated-gas']\n    const priceImpact = this.elements['price-impact']\n\n    if (toAmountInput) {\n      toAmountInput.value = parseFloat(quote.toAmount).toFixed(6)\n    }\n\n    if (txInfo) {\n      txInfo.classList.remove('hidden')\n    }\n\n    if (estimatedGas) {\n      estimatedGas.textContent = `${parseInt(quote.estimatedGas).toLocaleString()} gas`\n    }\n\n    if (priceImpact) {\n      priceImpact.textContent = `${quote.priceImpact}%`\n    }\n  }\n\n  private clearQuoteDisplay(): void {\n    const toAmountInput = this.elements['to-amount'] as HTMLInputElement\n    const txInfo = this.elements['tx-info']\n\n    if (toAmountInput) {\n      toAmountInput.value = ''\n    }\n\n    if (txInfo) {\n      txInfo.classList.add('hidden')\n    }\n  }\n\n  private async loadTokenBalances(): Promise<void> {\n    if (!this.walletManager.isConnected()) return\n\n    // Update token balances\n    const fromBalance = this.elements['from-balance']\n    const toBalance = this.elements['to-balance']\n\n    if (fromBalance && this.selectedFromToken) {\n      try {\n        const balance = await this.dexAggregator.getTokenBalance(this.selectedFromToken)\n        fromBalance.textContent = `Balance: ${parseFloat(balance).toFixed(4)}`\n      } catch (error) {\n        fromBalance.textContent = 'Balance: 0'\n      }\n    }\n\n    if (toBalance && this.selectedToToken) {\n      try {\n        const balance = await this.dexAggregator.getTokenBalance(this.selectedToToken)\n        toBalance.textContent = `Balance: ${parseFloat(balance).toFixed(4)}`\n      } catch (error) {\n        toBalance.textContent = 'Balance: 0'\n      }\n    }\n  }\n\n  private getExplorerUrl(txHash: string): string {\n    const chainId = this.walletManager.getChainId()\n    const chain = chainId ? SUPPORTED_CHAINS[chainId] : null\n    return chain ? `${chain.blockExplorer}/tx/${txHash}` : '#'\n  }\n}","/**\n * Notification Manager\n * Handles toast notifications and user feedback\n */\nexport class NotificationManager {\n  private container: HTMLElement\n  private notifications: Map<string, HTMLElement> = new Map()\n  private notificationId = 0\n\n  constructor() {\n    this.container = this.createContainer()\n    document.body.appendChild(this.container)\n  }\n\n  initialize(): void {\n    console.log('‚úÖ Notification Manager initialized')\n  }\n\n  private createContainer(): HTMLElement {\n    const container = document.createElement('div')\n    container.id = 'notification-container'\n    container.className = 'toast toast-top toast-end z-50'\n    return container\n  }\n\n  showSuccess(message: string, duration = 5000): string {\n    return this.showNotification(message, 'success', duration)\n  }\n\n  showError(message: string, duration = 8000): string {\n    return this.showNotification(message, 'error', duration)\n  }\n\n  showWarning(message: string, duration = 6000): string {\n    return this.showNotification(message, 'warning', duration)\n  }\n\n  showInfo(message: string, duration = 4000): string {\n    return this.showNotification(message, 'info', duration)\n  }\n\n  showLoading(message: string): string {\n    return this.showNotification(message, 'loading', 0) // 0 duration means persistent\n  }\n\n  private showNotification(message: string, type: 'success' | 'error' | 'warning' | 'info' | 'loading', duration: number): string {\n    const id = `notification-${++this.notificationId}`\n    const notification = this.createNotification(id, message, type)\n    \n    this.notifications.set(id, notification)\n    this.container.appendChild(notification)\n    \n    // Animate in\n    requestAnimationFrame(() => {\n      notification.classList.add('notification-enter')\n    })\n    \n    // Auto-remove after duration (if not persistent)\n    if (duration > 0) {\n      setTimeout(() => {\n        this.removeNotification(id)\n      }, duration)\n    }\n    \n    return id\n  }\n\n  private createNotification(id: string, message: string, type: string): HTMLElement {\n    const notification = document.createElement('div')\n    notification.id = id\n    notification.className = `alert notification-item ${this.getAlertClass(type)}`\n    \n    const icon = this.getIcon(type)\n    const closeButton = type !== 'loading' ? this.createCloseButton(id) : ''\n    \n    notification.innerHTML = `\n      <div class=\"flex items-start space-x-3\">\n        <div class=\"flex-shrink-0\">\n          ${icon}\n        </div>\n        <div class=\"flex-1 min-w-0\">\n          <div class=\"text-sm\">${message}</div>\n        </div>\n        ${closeButton}\n      </div>\n    `\n    \n    return notification\n  }\n\n  private getAlertClass(type: string): string {\n    switch (type) {\n      case 'success':\n        return 'alert-success'\n      case 'error':\n        return 'alert-error'\n      case 'warning':\n        return 'alert-warning'\n      case 'info':\n        return 'alert-info'\n      case 'loading':\n        return 'alert-info'\n      default:\n        return 'alert-info'\n    }\n  }\n\n  private getIcon(type: string): string {\n    switch (type) {\n      case 'success':\n        return `\n          <svg class=\"w-5 h-5 text-success\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\"></path>\n          </svg>\n        `\n      case 'error':\n        return `\n          <svg class=\"w-5 h-5 text-error\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\"></path>\n          </svg>\n        `\n      case 'warning':\n        return `\n          <svg class=\"w-5 h-5 text-warning\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\"></path>\n          </svg>\n        `\n      case 'info':\n        return `\n          <svg class=\"w-5 h-5 text-info\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\"></path>\n          </svg>\n        `\n      case 'loading':\n        return `\n          <svg class=\"w-5 h-5 text-info animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n          </svg>\n        `\n      default:\n        return ''\n    }\n  }\n\n  private createCloseButton(id: string): string {\n    return `\n      <button class=\"btn btn-ghost btn-xs\" onclick=\"window.notificationManager?.removeNotification('${id}')\">\n        <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n        </svg>\n      </button>\n    `\n  }\n\n  removeNotification(id: string): void {\n    const notification = this.notifications.get(id)\n    if (!notification) return\n    \n    // Animate out\n    notification.classList.add('notification-exit')\n    \n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification)\n      }\n      this.notifications.delete(id)\n    }, 300) // Match animation duration\n  }\n\n  updateNotification(id: string, message: string, type?: 'success' | 'error' | 'warning' | 'info'): void {\n    const notification = this.notifications.get(id)\n    if (!notification) return\n    \n    const messageElement = notification.querySelector('.text-sm')\n    if (messageElement) {\n      messageElement.innerHTML = message\n    }\n    \n    if (type) {\n      // Update alert class\n      notification.className = `alert notification-item ${this.getAlertClass(type)}`\n      \n      // Update icon\n      const iconElement = notification.querySelector('.flex-shrink-0')\n      if (iconElement) {\n        iconElement.innerHTML = this.getIcon(type)\n      }\n    }\n  }\n\n  clearAll(): void {\n    this.notifications.forEach((_, id) => {\n      this.removeNotification(id)\n    })\n  }\n\n  // Transaction-specific notifications\n  showTransactionPending(txHash: string, explorerUrl: string): string {\n    const message = `\n      Transaction pending...\n      <a href=\"${explorerUrl}/tx/${txHash}\" target=\"_blank\" class=\"link link-primary\">\n        View on Explorer\n      </a>\n    `\n    return this.showLoading(message)\n  }\n\n  showTransactionSuccess(txHash: string, explorerUrl: string): string {\n    const message = `\n      Transaction confirmed!\n      <a href=\"${explorerUrl}/tx/${txHash}\" target=\"_blank\" class=\"link link-primary\">\n        View on Explorer\n      </a>\n    `\n    return this.showSuccess(message)\n  }\n\n  showTransactionFailed(txHash: string, explorerUrl: string, error: string): string {\n    const message = `\n      Transaction failed: ${error}\n      <a href=\"${explorerUrl}/tx/${txHash}\" target=\"_blank\" class=\"link link-primary\">\n        View on Explorer\n      </a>\n    `\n    return this.showError(message)\n  }\n\n  // Wallet-specific notifications\n  showWalletConnecting(): string {\n    return this.showLoading('Connecting to wallet...')\n  }\n\n  showNetworkSwitching(networkName: string): string {\n    return this.showLoading(`Switching to ${networkName}...`)\n  }\n\n  showApprovalPending(tokenSymbol: string): string {\n    return this.showLoading(`Approving ${tokenSymbol}...`)\n  }\n\n  showSwapPending(): string {\n    return this.showLoading('Executing swap...')\n  }\n}\n\n// Global reference for inline event handlers\ndeclare global {\n  interface Window {\n    notificationManager?: NotificationManager\n  }\n}\n\n// CSS for animations (to be added to main.css)\nexport const notificationStyles = `\n.notification-item {\n  transform: translateX(100%);\n  transition: all 0.3s ease-in-out;\n  margin-bottom: 0.5rem;\n  max-width: 400px;\n}\n\n.notification-enter {\n  transform: translateX(0);\n}\n\n.notification-exit {\n  transform: translateX(100%);\n  opacity: 0;\n}\n\n.notification-item .link {\n  text-decoration: underline;\n  font-weight: 500;\n}\n\n.notification-item .link:hover {\n  text-decoration: none;\n}\n`","import { SimpleEventEmitter } from '@/utils/emitter'\nimport type { UserOperation, Bundle } from '../libs/erc4337/types'\n\n/**\n * Bundle Tracker\n * Monitors and displays MEV protection and transaction bundling status\n */\nexport class BundleTracker extends SimpleEventEmitter {\n  private container: HTMLElement | null = null\n  private activeBundles: Map<string, Bundle> = new Map()\n  private userOperations: Map<string, UserOperation> = new Map()\n  private isVisible = false\n\n  constructor() {\n    super()\n  }\n\n  initialize(): void {\n    this.container = document.getElementById('bundle-tracker')\n    if (!this.container) {\n      console.warn('Bundle tracker container not found')\n      return\n    }\n\n    this.setupUI()\n    console.log('‚úÖ Bundle Tracker initialized')\n  }\n\n  private setupUI(): void {\n    if (!this.container) return\n\n    this.container.innerHTML = `\n      <div class=\"card bg-base-100 shadow-lg\">\n        <div class=\"card-header\">\n          <h3 class=\"card-title text-lg font-semibold\">MEV Protection Status</h3>\n          <button id=\"bundle-tracker-toggle\" class=\"btn btn-ghost btn-sm\">\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\n            </svg>\n          </button>\n        </div>\n        <div id=\"bundle-tracker-content\" class=\"card-body ${this.isVisible ? '' : 'hidden'}\">\n          <div id=\"bundle-stats\" class=\"stats stats-horizontal shadow mb-4\">\n            <div class=\"stat\">\n              <div class=\"stat-title\">Active Bundles</div>\n              <div class=\"stat-value text-primary\" id=\"active-bundles-count\">0</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"stat-title\">Pending Ops</div>\n              <div class=\"stat-value text-secondary\" id=\"pending-ops-count\">0</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"stat-title\">MEV Saved</div>\n              <div class=\"stat-value text-success\" id=\"mev-saved\">$0</div>\n            </div>\n          </div>\n          \n          <div id=\"bundle-list\" class=\"space-y-3\">\n            <div id=\"no-bundles\" class=\"text-center text-base-content/60 py-8\">\n              <svg class=\"w-12 h-12 mx-auto mb-4 text-base-content/40\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\"></path>\n              </svg>\n              <p>No active bundles</p>\n              <p class=\"text-sm\">Enable smart account for MEV protection</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    `\n\n    // Setup toggle functionality\n    const toggleButton = document.getElementById('bundle-tracker-toggle')\n    const content = document.getElementById('bundle-tracker-content')\n    \n    if (toggleButton && content) {\n      toggleButton.addEventListener('click', () => {\n        this.isVisible = !this.isVisible\n        content.classList.toggle('hidden', !this.isVisible)\n        \n        const icon = toggleButton.querySelector('svg')\n        if (icon) {\n          icon.style.transform = this.isVisible ? 'rotate(180deg)' : 'rotate(0deg)'\n        }\n      })\n    }\n  }\n\n  // Track a new user operation\n  trackUserOperation(userOp: UserOperation): void {\n    this.userOperations.set(userOp.hash, userOp)\n    this.updateStats()\n    this.addUserOperationToUI(userOp)\n    this.emit('userOperationAdded', userOp)\n  }\n\n  // Track a new bundle\n  trackBundle(bundle: Bundle): void {\n    this.activeBundles.set(bundle.id, bundle)\n    this.updateStats()\n    this.addBundleToUI(bundle)\n    this.emit('bundleAdded', bundle)\n  }\n\n  // Update user operation status\n  updateUserOperationStatus(hash: string, status: 'pending' | 'included' | 'failed', txHash?: string): void {\n    const userOp = this.userOperations.get(hash)\n    if (!userOp) return\n\n    userOp.status = status\n    if (txHash) {\n      userOp.txHash = txHash\n    }\n\n    this.updateUserOperationInUI(userOp)\n    this.updateStats()\n    this.emit('userOperationUpdated', userOp)\n  }\n\n  // Update bundle status\n  updateBundleStatus(bundleId: string, status: 'pending' | 'submitted' | 'confirmed' | 'failed', txHash?: string): void {\n    const bundle = this.activeBundles.get(bundleId)\n    if (!bundle) return\n\n    bundle.status = status\n    if (txHash) {\n      bundle.txHash = txHash\n    }\n\n    this.updateBundleInUI(bundle)\n    this.updateStats()\n    this.emit('bundleUpdated', bundle)\n\n    // Remove completed bundles after delay\n    if (status === 'confirmed' || status === 'failed') {\n      setTimeout(() => {\n        this.removeBundle(bundleId)\n      }, 10000) // Remove after 10 seconds\n    }\n  }\n\n  // Add MEV savings data\n  addMEVSavings(amount: number, _currency = 'USD'): void {\n    const currentSavings = this.getTotalMEVSavings()\n    const newTotal = currentSavings + amount\n    \n    localStorage.setItem('mev-savings', newTotal.toString())\n    this.updateStats()\n    this.emit('mevSavingsUpdated', newTotal)\n  }\n\n  private updateStats(): void {\n    const activeBundlesCount = document.getElementById('active-bundles-count')\n    const pendingOpsCount = document.getElementById('pending-ops-count')\n    const mevSaved = document.getElementById('mev-saved')\n\n    if (activeBundlesCount) {\n      activeBundlesCount.textContent = this.activeBundles.size.toString()\n    }\n\n    if (pendingOpsCount) {\n      const pendingOps = Array.from(this.userOperations.values())\n        .filter(op => op.status === 'pending').length\n      pendingOpsCount.textContent = pendingOps.toString()\n    }\n\n    if (mevSaved) {\n      const totalSavings = this.getTotalMEVSavings()\n      mevSaved.textContent = `$${totalSavings.toFixed(2)}`\n    }\n  }\n\n  private addUserOperationToUI(userOp: UserOperation): void {\n    const bundleList = document.getElementById('bundle-list')\n    const noBundles = document.getElementById('no-bundles')\n    \n    if (!bundleList) return\n\n    // Hide \"no bundles\" message\n    if (noBundles) {\n      noBundles.classList.add('hidden')\n    }\n\n    const opElement = this.createUserOperationElement(userOp)\n    bundleList.appendChild(opElement)\n  }\n\n  private addBundleToUI(bundle: Bundle): void {\n    const bundleList = document.getElementById('bundle-list')\n    const noBundles = document.getElementById('no-bundles')\n    \n    if (!bundleList) return\n\n    // Hide \"no bundles\" message\n    if (noBundles) {\n      noBundles.classList.add('hidden')\n    }\n\n    const bundleElement = this.createBundleElement(bundle)\n    bundleList.appendChild(bundleElement)\n  }\n\n  private createUserOperationElement(userOp: UserOperation): HTMLElement {\n    const element = document.createElement('div')\n    element.id = `user-op-${userOp.hash}`\n    element.className = 'card bg-base-200 p-4'\n    \n    element.innerHTML = `\n      <div class=\"flex items-center justify-between\">\n        <div class=\"flex items-center space-x-3\">\n          <div class=\"${this.getStatusBadgeClass(userOp.status)}\">\n            ${this.getStatusIcon(userOp.status)}\n          </div>\n          <div>\n            <div class=\"font-medium\">User Operation</div>\n            <div class=\"text-sm text-base-content/60\">${userOp.hash.slice(0, 10)}...${userOp.hash.slice(-8)}</div>\n          </div>\n        </div>\n        <div class=\"text-right\">\n          <div class=\"text-sm font-medium\">${this.getStatusText(userOp.status)}</div>\n          <div class=\"text-xs text-base-content/60\">${this.formatTimestamp(userOp.timestamp)}</div>\n        </div>\n      </div>\n      ${userOp.txHash ? `\n        <div class=\"mt-3 pt-3 border-t border-base-300\">\n          <a href=\"${this.getExplorerUrl(userOp.txHash)}\" target=\"_blank\" class=\"link link-primary text-sm\">\n            View Transaction\n          </a>\n        </div>\n      ` : ''}\n    `\n    \n    return element\n  }\n\n  private createBundleElement(bundle: Bundle): HTMLElement {\n    const element = document.createElement('div')\n    element.id = `bundle-${bundle.id}`\n    element.className = 'card bg-base-200 p-4'\n    \n    element.innerHTML = `\n      <div class=\"flex items-center justify-between\">\n        <div class=\"flex items-center space-x-3\">\n          <div class=\"${this.getStatusBadgeClass(bundle.status)}\">\n            ${this.getStatusIcon(bundle.status)}\n          </div>\n          <div>\n            <div class=\"font-medium\">Bundle #${bundle.id.slice(-6)}</div>\n            <div class=\"text-sm text-base-content/60\">${bundle.userOperations.length} operations</div>\n          </div>\n        </div>\n        <div class=\"text-right\">\n          <div class=\"text-sm font-medium\">${this.getStatusText(bundle.status)}</div>\n          <div class=\"text-xs text-base-content/60\">${this.formatTimestamp(bundle.timestamp)}</div>\n        </div>\n      </div>\n      \n      <div class=\"mt-3\">\n        <div class=\"flex items-center justify-between text-sm\">\n          <span>MEV Protection:</span>\n          <span class=\"badge badge-success\">Active</span>\n        </div>\n        <div class=\"flex items-center justify-between text-sm mt-1\">\n          <span>Fair Ordering:</span>\n          <span class=\"badge badge-info\">ZK-Proof</span>\n        </div>\n      </div>\n      \n      ${bundle.txHash ? `\n        <div class=\"mt-3 pt-3 border-t border-base-300\">\n          <a href=\"${this.getExplorerUrl(bundle.txHash)}\" target=\"_blank\" class=\"link link-primary text-sm\">\n            View Bundle Transaction\n          </a>\n        </div>\n      ` : ''}\n    `\n    \n    return element\n  }\n\n  private updateUserOperationInUI(userOp: UserOperation): void {\n    const element = document.getElementById(`user-op-${userOp.hash}`)\n    if (!element) return\n\n    const statusBadge = element.querySelector('.badge')\n    const statusText = element.querySelector('.text-right .text-sm')\n    \n    if (statusBadge) {\n      statusBadge.className = this.getStatusBadgeClass(userOp.status)\n      statusBadge.innerHTML = this.getStatusIcon(userOp.status)\n    }\n    \n    if (statusText) {\n      statusText.textContent = this.getStatusText(userOp.status)\n    }\n\n    // Add transaction link if available\n    if (userOp.txHash && !element.querySelector('.link')) {\n      const linkContainer = document.createElement('div')\n      linkContainer.className = 'mt-3 pt-3 border-t border-base-300'\n      linkContainer.innerHTML = `\n        <a href=\"${this.getExplorerUrl(userOp.txHash)}\" target=\"_blank\" class=\"link link-primary text-sm\">\n          View Transaction\n        </a>\n      `\n      element.appendChild(linkContainer)\n    }\n  }\n\n  private updateBundleInUI(bundle: Bundle): void {\n    const element = document.getElementById(`bundle-${bundle.id}`)\n    if (!element) return\n\n    const statusBadge = element.querySelector('.badge')\n    const statusText = element.querySelector('.text-right .text-sm')\n    \n    if (statusBadge) {\n      statusBadge.className = this.getStatusBadgeClass(bundle.status)\n      statusBadge.innerHTML = this.getStatusIcon(bundle.status)\n    }\n    \n    if (statusText) {\n      statusText.textContent = this.getStatusText(bundle.status)\n    }\n\n    // Add transaction link if available\n    if (bundle.txHash && !element.querySelector('.link')) {\n      const linkContainer = document.createElement('div')\n      linkContainer.className = 'mt-3 pt-3 border-t border-base-300'\n      linkContainer.innerHTML = `\n        <a href=\"${this.getExplorerUrl(bundle.txHash)}\" target=\"_blank\" class=\"link link-primary text-sm\">\n          View Bundle Transaction\n        </a>\n      `\n      element.appendChild(linkContainer)\n    }\n  }\n\n  private removeBundle(bundleId: string): void {\n    const element = document.getElementById(`bundle-${bundleId}`)\n    if (element) {\n      element.remove()\n    }\n    \n    this.activeBundles.delete(bundleId)\n    this.updateStats()\n    \n    // Show \"no bundles\" message if no active bundles\n    if (this.activeBundles.size === 0 && this.userOperations.size === 0) {\n      const noBundles = document.getElementById('no-bundles')\n      if (noBundles) {\n        noBundles.classList.remove('hidden')\n      }\n    }\n  }\n\n  private getStatusBadgeClass(status: string): string {\n    switch (status) {\n      case 'pending':\n        return 'badge badge-warning'\n      case 'submitted':\n      case 'included':\n        return 'badge badge-info'\n      case 'confirmed':\n        return 'badge badge-success'\n      case 'failed':\n        return 'badge badge-error'\n      default:\n        return 'badge badge-ghost'\n    }\n  }\n\n  private getStatusIcon(status: string): string {\n    switch (status) {\n      case 'pending':\n        return `<svg class=\"w-4 h-4 animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\"><circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle><path class=\"opacity-75\" fill=\"currentColor\" d=\"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path></svg>`\n      case 'submitted':\n      case 'included':\n        return `<svg class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.293l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z\" clip-rule=\"evenodd\"></path></svg>`\n      case 'confirmed':\n        return `<svg class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\"></path></svg>`\n      case 'failed':\n        return `<svg class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\"></path></svg>`\n      default:\n        return ''\n    }\n  }\n\n  private getStatusText(status: string): string {\n    switch (status) {\n      case 'pending':\n        return 'Pending'\n      case 'submitted':\n        return 'Submitted'\n      case 'included':\n        return 'Included'\n      case 'confirmed':\n        return 'Confirmed'\n      case 'failed':\n        return 'Failed'\n      default:\n        return 'Unknown'\n    }\n  }\n\n  private formatTimestamp(timestamp: number): string {\n    const date = new Date(timestamp)\n    return date.toLocaleTimeString()\n  }\n\n  private getExplorerUrl(txHash: string): string {\n    // This should be updated based on the current network\n    return `https://etherscan.io/tx/${txHash}`\n  }\n\n  private getTotalMEVSavings(): number {\n    const saved = localStorage.getItem('mev-savings')\n    return saved ? parseFloat(saved) : 0\n  }\n\n  // Public methods for external use\n  show(): void {\n    if (this.container) {\n      this.container.classList.remove('hidden')\n    }\n  }\n\n  hide(): void {\n    if (this.container) {\n      this.container.classList.add('hidden')\n    }\n  }\n\n  clear(): void {\n    this.activeBundles.clear()\n    this.userOperations.clear()\n    \n    const bundleList = document.getElementById('bundle-list')\n    if (bundleList) {\n      bundleList.innerHTML = `\n        <div id=\"no-bundles\" class=\"text-center text-base-content/60 py-8\">\n          <svg class=\"w-12 h-12 mx-auto mb-4 text-base-content/40\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\"></path>\n          </svg>\n          <p>No active bundles</p>\n          <p class=\"text-sm\">Enable smart account for MEV protection</p>\n        </div>\n      `\n    }\n    \n    this.updateStats()\n  }\n}","/**\n * Theme Manager\n * Handles dark/light mode and UI theming\n */\nexport class ThemeManager {\n  private currentTheme: 'light' | 'dark' = 'dark'\n  private readonly THEME_KEY = 'dex-theme'\n  private readonly THEMES = {\n    light: {\n      name: 'light',\n      displayName: 'Light',\n      icon: '‚òÄÔ∏è'\n    },\n    dark: {\n      name: 'dark',\n      displayName: 'Dark',\n      icon: 'üåô'\n    }\n  }\n\n  constructor() {\n    this.loadTheme()\n  }\n\n  initialize(): void {\n    this.applyTheme()\n    this.setupThemeToggle()\n    console.log('‚úÖ Theme Manager initialized')\n  }\n\n  private loadTheme(): void {\n    // Check localStorage first\n    const savedTheme = localStorage.getItem(this.THEME_KEY) as 'light' | 'dark'\n    \n    if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {\n      this.currentTheme = savedTheme\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches\n      this.currentTheme = prefersDark ? 'dark' : 'light'\n    }\n  }\n\n  private applyTheme(): void {\n    // Apply theme to document\n    document.documentElement.setAttribute('data-theme', this.currentTheme)\n    document.documentElement.classList.remove('light', 'dark')\n    document.documentElement.classList.add(this.currentTheme)\n    \n    // Update meta theme-color for mobile browsers\n    this.updateMetaThemeColor()\n    \n    // Save to localStorage\n    localStorage.setItem(this.THEME_KEY, this.currentTheme)\n  }\n\n  private updateMetaThemeColor(): void {\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]')\n    const colors = {\n      light: '#ffffff',\n      dark: '#1f2937'\n    }\n    \n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', colors[this.currentTheme])\n    } else {\n      const meta = document.createElement('meta')\n      meta.name = 'theme-color'\n      meta.content = colors[this.currentTheme]\n      document.head.appendChild(meta)\n    }\n  }\n\n  private setupThemeToggle(): void {\n    const themeToggle = document.getElementById('theme-toggle')\n    if (!themeToggle) return\n\n    // Update toggle button\n    this.updateThemeToggle(themeToggle)\n    \n    // Add click handler\n    themeToggle.addEventListener('click', () => {\n      this.toggleTheme()\n    })\n\n    // Listen for system theme changes\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {\n      // Only auto-switch if user hasn't manually set a preference\n      if (!localStorage.getItem(this.THEME_KEY)) {\n        this.currentTheme = e.matches ? 'dark' : 'light'\n        this.applyTheme()\n        this.updateThemeToggle(themeToggle)\n      }\n    })\n  }\n\n  private updateThemeToggle(toggle: HTMLElement): void {\n    const theme = this.THEMES[this.currentTheme]\n    const nextTheme = this.currentTheme === 'light' ? this.THEMES.dark : this.THEMES.light\n    \n    toggle.innerHTML = `\n      <span class=\"swap-icon\">${theme.icon}</span>\n      <span class=\"sr-only\">Switch to ${nextTheme.displayName} mode</span>\n    `\n    \n    toggle.setAttribute('aria-label', `Switch to ${nextTheme.displayName} mode`)\n    toggle.setAttribute('title', `Switch to ${nextTheme.displayName} mode`)\n  }\n\n  toggleTheme(): void {\n    this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light'\n    this.applyTheme()\n    \n    // Update toggle button\n    const themeToggle = document.getElementById('theme-toggle')\n    if (themeToggle) {\n      this.updateThemeToggle(themeToggle)\n    }\n    \n    // Dispatch theme change event\n    window.dispatchEvent(new CustomEvent('themeChanged', {\n      detail: { theme: this.currentTheme }\n    }))\n  }\n\n  setTheme(theme: 'light' | 'dark'): void {\n    if (theme !== this.currentTheme) {\n      this.currentTheme = theme\n      this.applyTheme()\n      \n      // Update toggle button\n      const themeToggle = document.getElementById('theme-toggle')\n      if (themeToggle) {\n        this.updateThemeToggle(themeToggle)\n      }\n      \n      // Dispatch theme change event\n      window.dispatchEvent(new CustomEvent('themeChanged', {\n        detail: { theme: this.currentTheme }\n      }))\n    }\n  }\n\n  getCurrentTheme(): 'light' | 'dark' {\n    return this.currentTheme\n  }\n\n  getThemeInfo() {\n    return {\n      current: this.THEMES[this.currentTheme],\n      available: Object.values(this.THEMES)\n    }\n  }\n\n  // CSS custom properties for dynamic theming\n  setCSSProperty(property: string, value: string): void {\n    document.documentElement.style.setProperty(property, value)\n  }\n\n  getCSSProperty(property: string): string {\n    return getComputedStyle(document.documentElement).getPropertyValue(property)\n  }\n\n  // Utility methods for theme-aware components\n  isDarkMode(): boolean {\n    return this.currentTheme === 'dark'\n  }\n\n  isLightMode(): boolean {\n    return this.currentTheme === 'light'\n  }\n\n  // Get theme-appropriate colors\n  getThemeColors() {\n    const colors = {\n      light: {\n        primary: '#3b82f6',\n        secondary: '#6b7280',\n        accent: '#10b981',\n        neutral: '#374151',\n        base100: '#ffffff',\n        base200: '#f3f4f6',\n        base300: '#e5e7eb',\n        info: '#0ea5e9',\n        success: '#22c55e',\n        warning: '#f59e0b',\n        error: '#ef4444'\n      },\n      dark: {\n        primary: '#60a5fa',\n        secondary: '#9ca3af',\n        accent: '#34d399',\n        neutral: '#d1d5db',\n        base100: '#1f2937',\n        base200: '#374151',\n        base300: '#4b5563',\n        info: '#38bdf8',\n        success: '#4ade80',\n        warning: '#fbbf24',\n        error: '#f87171'\n      }\n    }\n    \n    return colors[this.currentTheme]\n  }\n\n  // Animation preferences\n  respectsReducedMotion(): boolean {\n    return window.matchMedia('(prefers-reduced-motion: reduce)').matches\n  }\n\n  // High contrast mode detection\n  prefersHighContrast(): boolean {\n    return window.matchMedia('(prefers-contrast: high)').matches\n  }\n\n  // Apply accessibility preferences\n  applyAccessibilityPreferences(): void {\n    if (this.respectsReducedMotion()) {\n      document.documentElement.classList.add('reduce-motion')\n    }\n    \n    if (this.prefersHighContrast()) {\n      document.documentElement.classList.add('high-contrast')\n    }\n  }\n\n  // Theme transition animation\n  animateThemeTransition(): void {\n    if (this.respectsReducedMotion()) return\n    \n    document.documentElement.classList.add('theme-transition')\n    \n    setTimeout(() => {\n      document.documentElement.classList.remove('theme-transition')\n    }, 300)\n  }\n}\n\n// CSS for theme transitions (to be added to main.css)\nexport const themeStyles = `\n.theme-transition {\n  transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;\n}\n\n.theme-transition * {\n  transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;\n}\n\n.reduce-motion,\n.reduce-motion * {\n  animation-duration: 0.01ms !important;\n  animation-iteration-count: 1 !important;\n  transition-duration: 0.01ms !important;\n}\n\n.high-contrast {\n  filter: contrast(1.5);\n}\n\n.swap-icon {\n  display: inline-block;\n  transition: transform 0.3s ease;\n}\n\n.btn:hover .swap-icon {\n  transform: scale(1.1);\n}\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n/* Theme-specific scrollbar styles */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--b2));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--bc) / 0.3);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--bc) / 0.5);\n}\n\n/* Focus styles for accessibility */\n:focus-visible {\n  outline: 2px solid hsl(var(--p));\n  outline-offset: 2px;\n}\n\n/* High contrast mode adjustments */\n@media (prefers-contrast: high) {\n  .btn {\n    border-width: 2px;\n  }\n  \n  .card {\n    border: 1px solid hsl(var(--bc) / 0.2);\n  }\n}\n`","import './main.css'\nimport { WalletManager } from './core/wallet'\nimport { DEXAggregator } from './core/dex'\nimport { UIManager } from './ui/manager'\nimport { NotificationManager } from './ui/notifications'\nimport { BundleTracker } from './ui/bundle-tracker'\nimport { ThemeManager } from './ui/theme-manager'\n\n/**\n * Main application entry point\n * Initializes all core services and UI components\n */\nclass App {\n  private walletManager: WalletManager\n  private dexAggregator: DEXAggregator\n  private uiManager: UIManager\n  private notificationManager: NotificationManager\n  private bundleTracker: BundleTracker\n  private themeManager: ThemeManager\n\n  constructor() {\n    // Initialize core services\n    this.walletManager = new WalletManager()\n    this.dexAggregator = new DEXAggregator(this.walletManager)\n    \n    // Initialize UI components\n    this.notificationManager = new NotificationManager()\n    this.bundleTracker = new BundleTracker()\n    this.themeManager = new ThemeManager()\n    this.uiManager = new UIManager(\n      this.walletManager,\n      this.dexAggregator,\n      this.notificationManager\n    )\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      console.log('üöÄ Initializing FortiFi DEX Aggregator...')\n      \n      // Initialize theme\n      this.themeManager.initialize()\n      \n      // Initialize wallet manager\n      await this.walletManager.initialize()\n      \n      // Initialize DEX aggregator\n      await this.dexAggregator.initialize()\n      \n      // Initialize UI\n      this.uiManager.initialize()\n      \n      // Initialize bundle tracker\n      this.bundleTracker.initialize()\n      \n      console.log('‚úÖ Application initialized successfully')\n    } catch (error) {\n      console.error('‚ùå Failed to initialize application:', error)\n      this.notificationManager.showError('Failed to initialize application')\n    }\n  }\n}\n\n// Initialize application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', async () => {\n  const app = new App()\n  await app.initialize()\n})\n\n// Handle unhandled errors\nwindow.addEventListener('error', (event) => {\n  console.error('Unhandled error:', event.error)\n})\n\nwindow.addEventListener('unhandledrejection', (event) => {\n  console.error('Unhandled promise rejection:', event.reason)\n  event.preventDefault()\n})"],"names":["SimpleEventEmitter","constructor","__publicField","this","Map","on","event","listener","listeners","has","set","Set","get","add","off","delete","size","once","onceListener","args","emit","Array","from","err","console","error","removeAllListeners","clear","SUPPORTED_CHAINS","id","name","symbol","decimals","rpcUrl","blockExplorer","logoUrl","WalletManager","isConnected","address","chainId","balance","provider","signer","setupEventListeners","initialize","localStorage","getItem","isMetaMaskAvailable","connectWallet","window","ethereum","accounts","length","disconnect","handleAccountChange","handleChainChange","parseInt","Error","request","method","ethers.BrowserProvider","getSigner","getAddress","network","getNetwork","getBalance","state","Number","ethers.formatEther","setItem","log","removeItem","switchNetwork","chain","params","toString","code","addNetwork","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","newAddress","newChainId","updateBalance","sendTransaction","transaction","hash","signMessage","message","getState","getChainId","getProvider","DEFAULT_GAS_LIMITS","SmartAccountBundler","entryPointAddress","bundlerWallet","__publicField$6","createSwapIntent","userAddress","fromToken","toToken","amount","slippage","fairOrderingProof","generateFairOrderingProof","timestamp","Date","now","quote","getOKXSwap","fromTokenAddress","toTokenAddress","userWalletAddress","intent","user","fromAmount","minToAmount","mevProtection","Math","random","slice","deadline","status","parseFloat","data","routerResult","toTokenAmount","zkProof","pendingIntents","bundleQueue","push","shouldCreateBundle","createBundle","submitUserOperation","userOp","isValidUserOperation","userOpHash","reason","sender","estimatedGas","callGasLimit","estimatedTime","BUNDLE_TIMEOUT","createUserOperation","txData","nonce","getUserOpNonce","then","n","initCode","callData","verificationGasLimit","preVerificationGas","maxFeePerGas","maxPriorityFeePerGas","paymasterAndData","signature","BUNDLE_SIZE","getOldestIntentAge","intentsToBundle","splice","userOps","getSwapTransactionData","bundle","userOperations","fairOrdering","activeBundles","tx","createBundleTransaction","receipt","wait","txHash","transactionHash","entryPoint","ethers.Contract","formattedOps","map","op","handleOps","_sender","floor","oldest","min","proof","repeat","publicSignals","verificationKey","circuit","axios","getPendingIntents","values","getActiveBundles","getIntent","getBundle","calculateMEVSavings","bundlerInstance","ERC20_ABI","OKX_DEX_API_BASE","DEXAggregator","walletManager","__publicField$5","loadTokens","availableTokens","Object","require","POPULAR_TOKENS","getQuote","quoteArgs","quoteResponse","async","URLSearchParams","response","msg","tokenContractAddress","tokenSymbol","fromTokenAmount","toAmount","estimateGasFee","route","dexRouterList","router","protocol","percentage","routerPercent","priceImpact","rate","max","validUntil","getOKXQuote","currentQuote","calculatePriceImpact","r","executeSwap","useSmartAccount","bundlerInitialized","initializeBundler","executeSmartAccountSwap","executeDirectSwap","bundlerPrivateKey","ethers.Wallet","ethers.JsonRpcProvider","bundler","Promise","resolve","reject","timeout","setTimeout","checkBundle","setInterval","currentIntent","clearInterval","clearTimeout","bundleId","swapArgs","swapResponse","referrerAddress","append","allowanceTarget","to","checkTokenApproval","approveToken","value","gasLimit","gas","token","spender","ethers.ZeroAddress","erc20","owner","allowance","ethers.parseUnits","tokenAddress","spenderAddress","toLowerCase","contract","approve","approveAllowance","isFinite","toFixed","getAvailableTokens","getCurrentQuote","getTokenBalance","all","balanceOf","ethers.formatUnits","debounce","func","delay","timeoutId","UIManager","dexAggregator","notificationManager","__publicField$4","cacheElements","setupServiceListeners","updateUI","forEach","element","document","getElementById","elements","warn","addEventListener","handleWalletConnect","fromAmountInput","handleAmountChange","openTokenSelector","switchTokens","smartAccountToggle","checked","updateSwapButton","handleSwap","tokenSearch","filterTokens","showSuccess","showInfo","loadTokenBalances","tokens","populateTokenList","updateQuoteDisplay","isSwapping","result","getExplorerUrl","showError","selectedFromToken","selectedToToken","clearQuoteDisplay","type","modal","classList","setAttribute","searchInput","focus","temp","updateTokenSelectors","swapParams","tokenList","innerHTML","tokenItem","createTokenListItem","appendChild","item","createElement","className","logoURI","selectToken","tokenType","getAttribute","remove","query","filteredTokens","filter","includes","updateWalletButton","updateChainSelector","button","walletState","textContent","selector","updateTokenSelector","buttonText","loading","removeAttribute","toAmountInput","txInfo","toLocaleString","fromBalance","toBalance","NotificationManager","__publicField$3","container","createContainer","body","duration","showNotification","showWarning","showLoading","notificationId","notification","createNotification","notifications","requestAnimationFrame","removeNotification","getAlertClass","icon","getIcon","closeButton","createCloseButton","parentNode","removeChild","updateNotification","messageElement","querySelector","iconElement","clearAll","_","showTransactionPending","explorerUrl","showTransactionSuccess","showTransactionFailed","showWalletConnecting","showNetworkSwitching","networkName","showApprovalPending","showSwapPending","BundleTracker","__publicField$2","setupUI","isVisible","toggleButton","content","toggle","style","transform","trackUserOperation","updateStats","addUserOperationToUI","trackBundle","addBundleToUI","updateUserOperationStatus","updateUserOperationInUI","updateBundleStatus","updateBundleInUI","removeBundle","addMEVSavings","_currency","newTotal","getTotalMEVSavings","activeBundlesCount","pendingOpsCount","mevSaved","pendingOps","totalSavings","bundleList","noBundles","opElement","createUserOperationElement","bundleElement","createBundleElement","getStatusBadgeClass","getStatusIcon","getStatusText","formatTimestamp","statusBadge","statusText","linkContainer","toLocaleTimeString","saved","show","hide","ThemeManager","__publicField$1","light","displayName","dark","loadTheme","applyTheme","setupThemeToggle","savedTheme","THEME_KEY","prefersDark","matchMedia","matches","currentTheme","documentElement","updateMetaThemeColor","metaThemeColor","colors","meta","head","themeToggle","updateThemeToggle","toggleTheme","e","theme","THEMES","nextTheme","dispatchEvent","CustomEvent","detail","setTheme","getCurrentTheme","getThemeInfo","current","available","setCSSProperty","property","setProperty","getCSSProperty","getComputedStyle","getPropertyValue","isDarkMode","isLightMode","getThemeColors","primary","secondary","accent","neutral","base100","base200","base300","info","success","warning","respectsReducedMotion","prefersHighContrast","applyAccessibilityPreferences","animateThemeTransition","App","bundleTracker","themeManager","uiManager","app","preventDefault"],"mappings":"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"}